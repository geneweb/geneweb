import enum


@enum.unique
class MagicNumbers(enum.IntEnum):
    SMALL = 0x8495A6BE
    BIG = 0x8495A6BF
    COMPRESSED = 0x8495A6BD


# /* Codes for the compact format */

# define PREFIX_SMALL_BLOCK 0x80
PREFIX_SMALL_BLOCK = 0x80
# define PREFIX_SMALL_INT 0x40
PREFIX_SMALL_INT = 0x40
# define PREFIX_SMALL_STRING 0x20
PREFIX_SMALL_STRING = 0x20
# define CODE_INT8 0x0
CODE_INT8 = 0x0
# define CODE_INT16 0x1
CODE_INT16 = 0x1
# define CODE_INT32 0x2
CODE_INT32 = 0x2
# define CODE_INT64 0x3
CODE_INT64 = 0x3
# define CODE_SHARED8 0x4
CODE_SHARED8 = 0x4
# define CODE_SHARED16 0x5
CODE_SHARED16 = 0x5
# define CODE_SHARED32 0x6
CODE_SHARED32 = 0x6
# define CODE_SHARED64 0x14
CODE_SHARED64 = 0x14
# define CODE_BLOCK32 0x8
CODE_BLOCK32 = 0x8
# define CODE_BLOCK64 0x13
CODE_BLOCK64 = 0x13
# define CODE_STRING8 0x9
CODE_STRING8 = 0x9
# define CODE_STRING32 0xA
CODE_STRING32 = 0xA
# define CODE_STRING64 0x15
CODE_STRING64 = 0x15
# define CODE_DOUBLE_BIG 0xB
CODE_DOUBLE_BIG = 0xB
# define CODE_DOUBLE_LITTLE 0xC
CODE_DOUBLE_LITTLE = 0xC
# define CODE_DOUBLE_ARRAY8_BIG 0xD
CODE_DOUBLE_ARRAY8_BIG = 0xD
# define CODE_DOUBLE_ARRAY8_LITTLE 0xE
CODE_DOUBLE_ARRAY8_LITTLE = 0xE
# define CODE_DOUBLE_ARRAY32_BIG 0xF
CODE_DOUBLE_ARRAY32_BIG = 0xF
# define CODE_DOUBLE_ARRAY32_LITTLE 0x7
CODE_DOUBLE_ARRAY32_LITTLE = 0x7
# define CODE_DOUBLE_ARRAY64_BIG 0x16
CODE_DOUBLE_ARRAY64_BIG = 0x16
# define CODE_DOUBLE_ARRAY64_LITTLE 0x17
CODE_DOUBLE_ARRAY64_LITTLE = 0x17
# define CODE_CODEPOINTER 0x10
CODE_CODEPOINTER = 0x10
# define CODE_INFIXPOINTER 0x11
CODE_INFIXPOINTER = 0x11
# define OLD_CODE_CUSTOM 0x12  // no longer supported
OLD_CODE_CUSTOM = 0x12  # no longer supported
# define CODE_CUSTOM_LEN 0x18
CODE_CUSTOM_LEN = 0x18
# define CODE_CUSTOM_FIXED 0x19
CODE_CUSTOM_FIXED = 0x19

# define ENTRIES_PER_TRAIL_BLOCK  1025
ENTRIES_PER_TRAIL_BLOCK = 1025
# define SIZE_EXTERN_OUTPUT_BLOCK 8100
SIZE_EXTERN_OUTPUT_BLOCK = 8100


# struct caml_output_block {
#   struct caml_output_block * next;
#   char * end;
#   char data[SIZE_EXTERN_OUTPUT_BLOCK];
# };
class OutputBlock:
    def __init__(self):
        self.next = None  # type: OutputBlock | None
        self.end = 0  # type: int
        self.data = bytearray(SIZE_EXTERN_OUTPUT_BLOCK)  # type: bytearray
