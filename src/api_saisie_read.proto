package geneweb.api.saisie_read.object;

enum Sosa {
  SOSA_REF = 0;
  SOSA = 1;
  NO_SOSA = 2;
}

enum Calendar {
  GREGORIAN = 0;
  JULIAN = 1;
  FRENCH = 2;
  HEBREW = 3;
}

enum Precision {
  SURE = 0;
  ABOUT = 1;
  MAYBE = 2;
  BEFORE = 3;
  AFTER = 4;
  ORYEAR = 5;
  YEARINT = 6;
}

message Dmy {
  required int32 day = 1;
  required int32 month = 2;
  required int32 year = 3;
  required int32 delta = 4;
}

message Date {
  optional Calendar cal = 2;
  optional Precision prec = 3;
  optional Dmy dmy = 4;
  optional Dmy dmy2 = 5;
  optional string text = 6;
}

enum Sex {
  MALE = 0;
  FEMALE = 1;
  UNKNOWN = 2;
}

enum DeathType {
  NOT_DEAD = 0;
  DEAD = 1;
  DEAD_YOUNG = 2;
  DEAD_DONT_KNOW_WHEN = 3;
  DONT_KNOW_IF_DEAD = 4;
  OF_COURSE_DEAD = 5;
}

enum MarriageType {
  MARRIED = 0;
  NOT_MARRIED = 1;
  ENGAGED = 2;
  NO_SEXES_CHECK_NOT_MARRIED = 3;
  NO_MENTION = 4;
  NO_SEXES_CHECK_MARRIED = 5;
}

enum DivorceType {
  NOT_DIVORCED = 0;
  DIVORCED = 1;
  SEPARATED = 2;
}

enum RelationType {
  RPARENT_ADOPTION = 0;
  RPARENT_RECOGNITION = 1;
  RPARENT_CANDIDATE_PARENT = 2;
  RPARENT_GOD_PARENT = 3;
  RPARENT_FOSTER_PARENT = 4;
  RCHILD_ADOPTION = 5;
  RCHILD_RECOGNITION = 6;
  RCHILD_CANDIDATE_PARENT = 7;
  RCHILD_GOD_PARENT = 8;
  RCHILD_FOSTER_PARENT = 9;
}

enum WitnessType {
  WITNESS = 0;
  WITNESS_GODPARENT = 1;
  WITNESS_OFFICER = 2;
}

message WitnessEvent {
  required WitnessType witness_type = 1;
  required SimplePerson witness = 2;
}

message Event {
  required string name = 1;
  optional string date = 2;
  optional string date_conv = 3;
  optional Calendar date_cal = 4;
  optional string place = 5;
  optional string reason = 6;
  optional string note = 7;
  optional string src = 8;
  optional SimplePerson spouse = 9;
  repeated WitnessEvent witnesses = 10;
}

message PersonTree {
  required int32 index = 1;
  required Sex sex = 2;
  required string lastname = 3;
  required string firstname = 4;
  required string n = 5;
  required string p = 6;
  required int32 occ = 7;
  optional string dates = 8;
  optional string image = 9;
  required Sosa sosa = 10;
  required bool has_more_infos = 11;
  required string baseprefix = 12;
}

message SimplePerson {
  required int32 index = 1;
  required Sex sex = 2;
  required string lastname = 3;
  required string firstname = 4;
  required string n = 5;
  required string p = 6;
  required int32 occ = 7;
  optional string birth_short_date = 8;
  optional string birth_place = 9;
  optional string death_short_date = 10;
  optional string death_place = 11;
  optional string image = 12;
  required Sosa sosa = 13;
  required string baseprefix = 14;
}

message RelationPerson {
  required RelationType r_type = 1;
  required SimplePerson person = 2;
}

message EventWitness {
  required string event_witness_type = 1;
  required SimplePerson husband = 2;
  optional SimplePerson wife = 3;
}

message Person {
  required int32 index = 1;
  required Sex sex = 2;
  required string lastname = 3;
  required string firstname = 4;
  required string n = 5;
  required string p = 6;
  required int32 occ = 7;
  optional string public_name = 8;
  repeated string aliases = 9;
  repeated string qualifiers = 10;
  repeated string firstname_aliases = 11;
  repeated string surname_aliases = 12;
  optional string image = 13;
  optional string birth_date = 14;
  optional string birth_date_conv = 15;
  optional Calendar birth_date_cal = 16;
  optional string birth_place = 17;
  optional string birth_src = 18;
  optional string baptism_date = 19;
  optional string baptism_date_conv = 20;
  optional Calendar baptism_date_cal = 21;
  optional string baptism_place = 22;
  optional string baptism_src = 23;
  optional string death_date = 24;
  optional string death_date_conv = 25;
  optional Calendar death_date_cal = 26;
  optional string death_place = 27;
  optional string death_src = 28;
  required DeathType death_type = 29;
  optional string burial_date = 30;
  optional string burial_date_conv = 31;
  optional Calendar burial_date_cal = 32;
  optional string burial_place = 33;
  optional string burial_src = 34;
  optional string occupation = 35;
  optional string notes = 36;
  optional string psources = 37;
  required bool has_sources = 38;
  repeated string titles = 39;
  repeated RelationPerson related = 40;
  repeated RelationPerson rparents = 41;
  optional SimplePerson father = 42;
  optional SimplePerson mother = 43;
  repeated Family families = 44;
  required Sosa sosa = 45;
  repeated Event events = 46;
  repeated EventWitness events_witnesses = 47;
}

message Family {
  required int32 index = 1;
  required SimplePerson spouse = 2;
  optional string marriage_date = 3;
  optional string marriage_date_conv = 4;
  optional Calendar marriage_date_cal = 5;
  optional string marriage_place = 6;
  optional string marriage_src = 7;
  required MarriageType marriage_type = 8;
  required DivorceType divorce_type = 9;
  optional string divorce_date = 10;
  optional string divorce_date_conv = 11;
  optional Calendar divorce_date_cal = 12;
  repeated SimplePerson witnesses = 13;
  optional string notes = 14;
  optional string fsources = 15;
  repeated SimplePerson children = 16;
}

message IndexPerson {
  required int32 index = 1;
}

message Node {
  required int64 id = 1;
  required PersonTree person = 2;
  optional int64 ifam = 3;
}

message Edge {
  required int64 from_node = 1;
  required int64 to_node = 2;
}

message GraphTree {
  repeated Node nodes_asc = 1;
  repeated Edge edges_asc = 2;
  repeated Node nodes_desc = 3;
  repeated Edge edges_desc = 4;
  repeated Node nodes_siblings = 5;
}

message GraphTreeNew {
  repeated Node nodes_asc = 1;
  repeated Edge edges_asc = 2;
  repeated Node nodes_desc = 3;
  repeated Edge edges_desc = 4;
  repeated Node nodes_siblings = 5;
  repeated Node nodes_siblings_before = 6;
  repeated Node nodes_siblings_after = 7;
}

message GraphTreeParams {
  required int32 index = 1;
  optional int32 nb_asc = 2;
  optional int32 nb_desc = 3;
}


// ***************************************************************************
// Version identique mais avec des personnes full
// ***************************************************************************


enum TitleType {
  TITLE_MAIN = 0;
  TITLE_NAME = 1;
  TITLE_NONE = 2;
}

message Title {
  required TitleType title_type = 1;
  optional string name = 2;
  optional string title = 3;
  optional string fief = 4;
  optional string date_begin = 5;
  optional string date_end = 6;
  optional int32 nth = 7;
}

message PersonTreeFull {
  required int32 index = 1;
  required Sex sex = 2;
  required string lastname = 3;
  required string firstname = 4;
  required string n = 5;
  required string p = 6;
  required int32 occ = 7;
  optional string image = 8;
  required Sosa sosa = 9;
  optional string public_name = 10;
  repeated string aliases = 11;
  repeated string qualifiers = 12;
  repeated string firstname_aliases = 13;
  repeated string surname_aliases = 14;
  optional string birth_date = 15;
  optional string birth_place = 16;
  optional string birth_src = 17;
  optional string baptism_date = 18;
  optional string baptism_place = 19;
  optional string baptism_src = 20;
  optional string death_date = 21;
  optional string death_place = 22;
  optional string death_src = 23;
  required DeathType death_type = 24;
  optional string burial_date = 25;
  optional string burial_place = 26;
  optional string burial_src = 27;
  optional string occupation = 28;
  optional string psources = 29;
  repeated Title titles = 30;
  required bool visible_for_visitors = 31;
  required bool has_more_infos = 32;
  required string baseprefix = 33;
}

message FamilyTreeFull {
  optional string fsources = 1;
  optional string marriage_date = 2;
  optional string marriage_place = 3;
  optional string marriage_src = 4;
  required MarriageType marriage_type = 5;
  required DivorceType divorce_type = 6;
  optional string divorce_date = 7;
  required int32 index = 8;
}

message NodeFull {
  required int64 id = 1;
  required PersonTreeFull person = 2;
  optional int64 ifam = 3;
}

message GraphTreeFull {
  repeated NodeFull nodes_asc = 1;
  repeated Edge edges_asc = 2;
  repeated FamilyTreeFull families_asc = 3;
  repeated NodeFull nodes_desc = 4;
  repeated Edge edges_desc = 5;
  repeated FamilyTreeFull families_desc = 6;
  repeated NodeFull nodes_siblings = 7;
  repeated NodeFull nodes_siblings_before = 8;
  repeated NodeFull nodes_siblings_after = 9;
}
