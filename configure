#!/bin/bash

# TODO? re-enable interactive and configure options

PROG_NAME=${0##*/}

# Output for the generated file
MAKEFILE=Makefile.config

STRIP=true
RM=
EXT=
OS_TYPE=

API_D=
API_PKG=
GWDB_D=
GWDB_PKG=
SOSA_PKG=

while [[ $# -ne 0 ]]; do
  case $1 in
    --api)
      API_PKG="piqirun.ext redis-sync yojson curl";
      API_D="-D API" ;;
    --gwdb1)
      GWDB_D="-D GWDB1" ;
      GWDB_PKG="geneweb.gwdb1" ;;
    --sosa-num)
      SOSA_PKG="geneweb.sosa-num" ;;
    --sosa-zarith)
      SOSA_PKG="geneweb.sosa-zarith" ;;
    *)
      echo -e "\\x1b[33m[WARNING]\\x1b[0m Option $1 unknown and ignored.";;
  esac
  [[ $# -gt 0 ]] && shift
done

if [[ $GWDB_D == "" ]] ; then
  echo -e "\\x1b[33m[WARNING]\\x1b[0m GWDB is not set, using gwdb1" ;
  GWDB_D="-D GWDB1" ;
  GWDB_PKG="geneweb.gwdb1" ;
fi ;

if [[ $SOSA_PKG == "" ]] ; then
  echo -e "\\x1b[33m[WARNING]\\x1b[0m SOSA is not set, using geneweb.sosa" ;
  SOSA_PKG="geneweb.sosa" ;
fi ;

# Functions that print the checked information

# Length of line for print_check_*
LINE_WIDTH=65

print_check_gen() {
  local n=$(( $LINE_WIDTH-${#2}-8 ))
  printf "\\x1b[36m[INFO]\\x1b[0m %s " "$2"
  printf ".%.0s" $(eval "echo {1.."$(($n))"}")
  printf " \\x1b[%sm%s\\x1b[0m" "$1" "$3"
  echo
}

print_check_ok() {
  print_check_gen "32" "$1" "${2:-OK}"
}

# Functions to check the environment

check_os() {
  OS_TYPE=`uname -s`
  if [[ $OS_TYPE == "Linux" ]] ; then
    print_check_ok "Checking OS type" "Linux"
    EXT=
    RM="/bin/rm -f"
    STRIP=strip
  elif [[ $OS_TYPE == "Darwin" ]] ; then
    print_check_ok "Checking OS type" "Darwin"
    EXT=
    RM="/bin/rm -f"
    STRIP=strip
  else
    print_check_ok "Checking OS type" "WINDOWS"
    OS_TYPE="Win"
    CAMLP5F+=" -D WINDOWS"
    EXT=".exe"
    RM="rm -f"
    STRIP=true
  fi
}

# Functions to print Makefile.config.

# Print common options, should be called first.
print_common_header() {
  echo "# This file is generated by $0."
  echo
  echo "OS_TYPE=${OS_TYPE}"
}

print_tools() {
  echo
  echo "# Tools"
  echo "STRIP=${STRIP}"
  echo "RM=${RM}"
  echo "EXT=${EXT}"
}

print_vars() {
  echo "API_D=${API_D}"
  echo "API_PKG=${API_PKG}"
  echo "GWDB_D=${GWDB_D}"
  echo "GWDB_PKG=${GWDB_PKG}"
  echo "SOSA_PKG=${SOSA_PKG}"
}

print_makefile() {
  (print_common_header
   print_tools
   print_vars
  ) > $MAKEFILE
}

# Print Makefile
check_os
print_makefile
