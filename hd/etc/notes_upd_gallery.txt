<!-- $Id: notes_upd_gallery.txt v7.1 25/11/2024 09:02:13 $ -->
<!DOCTYPE html>
<html>
<head>
  <title>[*reactive image map editor]</title>
  <meta name="robots" content="none">
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <link rel="shortcut icon" href="%image_prefix;favicon_gwd.png">
  <link rel="apple-touch-icon" href="%image_prefix;favicon_gwd.png">
  %include;css
  %if;(b.use_cdn="yes")
    <link href="https://cdn.datatables.net/v/bs4/dt-2.1.8/rr-1.5.0/datatables.min.css" rel="stylesheet"
      integrity="sha256-KPU2wRXSeg7r7IlZ6DARVH5+r4eUh1NkV9JNYiqaPLs=
                 sha384-W9T1e24SGBgoxz++zItwdyIs1bVELnmIqIJ5bF1ZeZ0Ee2vDPBK1PmgrdxvNJGmU
                 sha512-rTTTKtCyaaEqHmsomlAtTapRfYUxUL4Y9f5VAmi9Yf7rO50p0dk6EB/HgrpRmyKdfUXcBhQ4z6YgacgXfmyO7g=="
      crossorigin="anonymous" referrerpolicy="no-referrer">
  %else;
    <link rel="stylesheet" href="%etc_prefix;css/datatables.min.css?version=dt-2.1.8+rr-1.5.0">
  %end;
  <style>
    .in { background-color: #FFE8CC !important; }
    #selection { border: 2px solid white; background: #1B94E0; opacity: 0.4; filter: alpha(opacity=40); display: none; }
    .list_comma, .list_comma li { display: inline-block; line-height: 1.2; }
    .list_comma li:not(:last-child):after { content: ", "; }
    .list_comma li:last-child:after { content: "."; }
    input:invalid { box-shadow: 0 0 1.5px 1px red; }
    #image { cursor: crosshair; }
    .w12 { min-width: 4em; }
    #type { width: 8em; }
    input[type=number] { width: 4.5em; }
    .sort-buttons { width: 0px; }
    tr:has(+ tr) .sort-buttons { width: 3.3em; }
    table.dataTable td { vertical-align: middle; }
    #map_table th:not(:nth-child(11)), #grp_table th:not(nth-child(3)) { padding-left: 8px;}
    .drag-handle { cursor: grab; }
    .drag-handle:active { cursor: grabbing; }
    tr:first-child .btn-up { display: none; }
    tr:last-child .btn-down { display: none; }
</style>
  %include;hed
</head>
<body%body_prop;>
<div class="container-fluid">
%include;home
<h1 class="mt-1 ml-3">[*reactive image map editor]</h1>
<div id="fd_error"></div>
<form id="form" class="mt-3 ml-2" method="post" action="%action;">
  <div class="col-sm-12 col-lg-7">
    <div class="form-row">
      <label for="page_title" class="col-form-label col-sm-2">[*title/titles]0</label>
      <input type="text" class="form-control col-sm-7" id="page_title">
    </div>
    <div class="form-row mt-2">
      <label for="page_desc" class="col-form-label col-sm-2">Description</label>
      <textarea class="form-control col-sm-7" id="page_desc" rows="2"></textarea>
    </div>
    <div class="form-row mt-2">
      <label for="fname" class="col-form-label col-sm-2">[*file]</label>
      <div class="d-flex col-sm-7 px-0">
        <div class="input-group">
          <input id="fname" type="text" class="form-control flex-fill" list="src_images">
          <datalist id="src_images">
            %src_images_list;
          </datalist>
          <div class="input-group-append">
            <button type="button" class="btn btn-outline-secondary" id="clear-image" title="Clear image field">
              <i class="fa fa-times"></i>
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div class="mt-3 m-3">
    <div id="div_img_legend">
      <div id="frame" onmousedown="return false">
        <map id="map" name="map"></map>
        <img id="image" usemap="#map">
        <div id="selection" class="m-0 p-0"></div>
        <div id="groups" class="m-0 p-0"></div>
      </div>
      <ul id="div_legend" class="list_comma list-unstyled pl-0"></ul>
    </div>
    <div class="table-responsive-md mt-2">
      <table id="map_table" class="table table-sm w-auto ml-0">
        <thead>
          <tr>
            <th></th>
            <th></th>
            <th></th>
            <th id="type">Type</th>
            <th class="w12">[*first name/first names]0</th>
            <th class="w12">[*surname/surnames]0</th>
            <th><span>[*number]</span></th>
            <th>[*group/groups]0</th>
            <th class="w12">URL</th>
            <th class="w12">[*comment]</th>
            <th><i class="fa fa-trash-can mx-1"></i></th>
          </tr>
        </thead>
      </table>
    </div>
  </div>
  <div class="table-responsive-md">
    <table id="grp_table" class="table table-sm w-auto ml-0">
      <thead>
        <tr>
          <th></th>
          <th class="w12">[*group label]</th>
          <th><i class="fa fa-trash-can mx-1"></i></th>
        </tr>
      </thead>
    </table>
  </div>

  %hidden;
  <input type="hidden" name="m" value="MOD_NOTES_OK">
  <input type="hidden" name="f" value="%e.f;">
  <input type="hidden" name="skip_ok" value="on">
  <input id="digest" type="hidden" name="digest">
  <input id="notes" type="hidden" name="notes">
  <div class="mt-2 ml-2">
    <button type="submit" form="form" class="btn btn-primary" title="[*validate/delete]0">OK</button>
    <a class="btn btn-outline-primary" href="%url_set.notmpl.on;">[*modify] [note/notes]0</a>
    <button type="button" id="add-group-btn" class="btn btn-outline-primary">[*add new group]</button>
    <button type="button" class="btn btn-danger ml-5" id="clear-all" title="Clear everything: form, image and tables!">
      Réinitialiser tout</button>
  </div>
</form>
</div>
%include;trl
%include;copyr
</div>
%include;js
%if;(b.use_cdn="yes")
  <script src="https://cdn.datatables.net/v/bs4/dt-2.1.8/rr-1.5.0/datatables.min.js"
    integrity="sha256-K9K34UCeIOBQFuVbrfi4kQaVBXYWi6SHYHUamWfbuHA=
               sha384-BrJUYe9FafQMFfINSlrNOR8+oJJuHwBdOPAcyzC97//5IVyyNQliyxZ17l3wFXv2
               sha512-msL+zow8mrATk2FqGH77oNNLqagj8iKqRMMolKducDvkKFsxk5+qO++GqKu+A7vs1L5JFIGdW22LXFLKiBs1nw=="
    crossorigin="anonymous" referrerpolicy="no-referrer"></script>
  <script src="https://cdn.jsdelivr.net/npm/maphilight@1.4.2/jquery.maphilight.min.js">
    integrity="sha256-CMISu7vXb6gfvgekngAzo/Mk2GOoFeLy9UIqjtJrt5Y=
               sha384-+gw07sufgVITpP4bHCQQeafUY2NQfyPBM3+931FUWejozbZ0+hCcd8dTUP4epnQK
               sha512-1YiTT24MNHA6DRzyu+w9F5Egc8evYlyEnzSSTD4/M7q42xEb5fSpNgn0+1CPy3evubHs3xdlh8uXgae0DOhR7Q=="
    crossorigin="anonymous" referrerpolicy="no-referrer"></script>
%else;
  <script src="%etc_prefix;js/datatables.min.js?version=dt-2.1.8+rr-1.5.0"></script>
  <script src="%etc_prefix;js/jquery.maphilight.min.js?version=1.4.2"></script>
%end;
<script>
var mouseIsNotOverLegend = true;
var table;
var global_cnt = 0;
var global_grp = 0;

// Maphilight configuration for genealogical photos
const MAPHILIGHT_CONFIG = {
    alwaysOn: false,
    stroke: true,
    strokeColor: 'dba76a', // Warm amber for genealogical photos
    strokeWidth: 2,
    strokeOpacity: 0.7,
    fillColor: 'ffffff',
    fillOpacity: 0,
    groupBy: false,
    neverOn: false 
};

// Add shape selector dropdown to the page header area, initially hidden
const shapeSelector = `
<div id="shape-selector" class="form-group ml-3 mb-2" style="display: none;">
  <label for="shape-type">Shape:</label>
  <select id="shape-type" class="form-control form-control-sm d-inline-block w-auto ml-2">
    <option value="rect">Rectangle</option>
    <option value="circle">Circle</option>
    <option value="poly">Polygon</option>
  </select>
</div>`;

// Utility function to safely get a value or return empty string if undefined
const Utils = {
    get: function(v) {
        return (typeof v !== "undefined") ? v : "";
    }
};
const get = Utils.get;

// Selection area drawing and interaction
const SelectionManager = {
  x1: 0,
  y1: 0,
  x2: 0,
  y2: 0,
  selection: false,
  gMOUSEUP: false,
  gMOUSEDOWN: false,
  redrawMode: false,

  // Get rectangular coordinates
  getCoords: function() {
    const x1 = Math.min(this.x1, this.x2);
    const y1 = Math.min(this.y1, this.y2);
    const x2 = Math.max(this.x1, this.x2);
    const y2 = Math.max(this.y1, this.y2);
    return `${x1},${y1},${x2},${y2}`;
  },

  init: function() {
    $(document).mouseup(() => {
      this.gMOUSEUP = true;
      this.gMOUSEDOWN = false;
    });

    $(document).mousedown(() => {
      this.gMOUSEUP = false;
      this.gMOUSEDOWN = true;
    });

    this.initFrameHandlers();
  },

  initFrameHandlers: function() {
    $("#frame").mousedown((event) => {
      this.x1 = Math.round(event.pageX);
      this.y1 = Math.round(event.pageY);
      this.x2 = this.x1;
      this.y2 = this.y1;
      this.selection = true;
    });

    $("#frame").mousemove((event) => {
      if (this.selection) {
        this.x2 = Math.round(event.pageX);
        this.y2 = Math.round(event.pageY);

        const TOP = Math.min(this.y1, this.y2);
        const LEFT = Math.min(this.x1, this.x2);
        const WIDTH = Math.abs(this.x2 - this.x1);
        const HEIGHT = Math.abs(this.y2 - this.y1);

        $("#selection").css({
          position: "absolute",
          zIndex: 5000,
          left: LEFT,
          top: TOP,
          width: WIDTH,
          height: HEIGHT,
        }).show();
      }
    });

    $("#frame").mouseup(() => {
      const pos = $("#frame").get(0).getBoundingClientRect();
      
      if (this.redrawMode) {
        const rowId = $("#redraw-target").data("current-row");
        let l_x1 = Math.min(this.x1, this.x2) - (pos.left + pageXOffset);
        let l_x2 = Math.max(this.x1, this.x2) - (pos.left + pageXOffset);
        let l_y1 = Math.min(this.y1, this.y2) - (pos.top + pageYOffset);
        let l_y2 = Math.max(this.y1, this.y2) - (pos.top + pageYOffset);
        
        // Only update if we have a valid selection
        if (Math.abs(l_x2 - l_x1) > 5 && Math.abs(l_y2 - l_y1) > 5) {
          const coords = `${l_x1},${l_y1},${l_x2},${l_y2}`;
          
          // Find the row and update coordinates
          const rowElement = $(`#row${rowId}`);
          if (rowElement.length) {
            const row = table.row(rowElement);
            let rowData = row.data() || {};
            
            // Update coordinates
            rowData.coords = coords;
            
            // Update table data
            row.data(rowData).draw(false);
            
            // Add back the area with new coordinates
            $("#map").append(`<area id="area${rowId}" shape="rect" coords="${coords}" alt="${rowId}" title="${rowId}">`);
          }
        } else {
          // If selection was too small, restore original area
          const originalCoords = $("#redraw-target").data("original-coords");
          $("#map").append(`<area id="area${rowId}" shape="rect" coords="${originalCoords}" alt="${rowId}" title="${rowId}">`);
        }
        
        // Reset redraw mode
        this.redrawMode = false;
        $("#redraw-target").removeData();
      } else {
        // Existing new area creation code
        let l_x1 = Math.min(this.x1, this.x2) - (pos.left + pageXOffset);
        let l_x2 = Math.max(this.x1, this.x2) - (pos.left + pageXOffset);
        let l_y1 = Math.min(this.y1, this.y2) - (pos.top + pageYOffset);
        let l_y2 = Math.max(this.y1, this.y2) - (pos.top + pageYOffset);

        add_new_row(l_x1, l_y1, l_x2, l_y2);
      }

      this.selection = false;
      $("#selection").hide();
    });

  // Handler for clicking outside the frame to cancel redraw area
  $(document).mouseup((e) => {
    if (this.redrawMode && !$(e.target).closest("#frame").length) {
      // Restore original area if click is outside frame
      const rowId = $("#redraw-target").data("current-row");
      const originalCoords = $("#redraw-target").data("original-coords");
      if (rowId && originalCoords) {
        $("#map").append(`<area id="area${rowId}" shape="rect" coords="${originalCoords}" alt="${rowId}" title="${rowId}">`);
      }
      
      // Reset redraw mode
      this.redrawMode = false;
      $("#redraw-target").removeData();
      this.selection = false;
      $("#selection").hide();
    }
  });

    $("#frame").mouseenter(() => {
      this.selection = this.gMOUSEDOWN;
    });

    $("#selection").mouseenter(() => {
      this.selection = this.gMOUSEDOWN;
    });

    $("#frame").mouseleave(() => {
      this.selection = false;
    });
  }
};

// Table row movement operations (↓↑ buttons)
const RowManager = {
  moveRow: function (direction) {
    return function (event) {
      event.preventDefault();
      const row = $(this).closest("tr");
      const targetRow = direction === "up" ? row.prev("tr") : row.next("tr");

      if (targetRow.length) {
        const currentRowData = table.row(row).data();
        const targetRowData = table.row(targetRow).data();
        table.row(row).data(targetRowData);
        table.row(targetRow).data(currentRowData);
        table.draw(false);
      }
    };
  },

  initRowMovement: function () {
    $("#map_table").on("click", ".btn-up", this.moveRow("up"));
    $("#map_table").on("click", ".btn-down", this.moveRow("down"));
  },
};

// Group-related operations and UI updates
// Add new group with next available number, calculating gaps in sequence
const GroupManager = {
  addNewGroup: function () {
    var numbers = [];
    table_grp.rows().every(function () {
      var rowData = this.data();
      var num = parseInt(rowData.name);
      if (!isNaN(num)) numbers.push(num);
    });

    numbers.sort((a, b) => a - b);
    var suggestedNumber = 1;
    for (let num of numbers) {
      if (num !== suggestedNumber) break;
      suggestedNumber++;
    }

    table_grp.row
      .add({
        name: suggestedNumber,
        label: "",
      })
      .draw();

      table_grp.order(%[0, 'asc'%]).draw();
  },

  // Update group labels in UI
  updateGroupLabels: function () {
    table_grp.rows().every(function (rowIdx) {
      const r = this.data();
      const row = this.node();
      const groupNum = row.id.replace(/[a-z_]/g, "");
      const label = get(r.label);
      if (label) {
        $(`#g${groupNum}`).html(`<span>${groupNum} : ${label}</span>`);
      }
    });
  },
};

// UI interaction effects and hover states
const UIManager = {
  init: function () {
    // Group table interactions
    $(document).on("mouseover", "grp_table", function (event) {
      var n = $(this).attr("id").replace(/[a-z]/g, "");
      $(`#g${n}`).mouseover().addClass("in");
    });
    $(document).on("mouseout", "grp_table", function (event) {
      var n = $(this).attr("id").replace(/[a-z]/g, "");
      $(`#g${n}`).mouseout().removeClass("in");
    });

    // Legend interactions
    $(document).on("mouseover", ".legend", function (event) {
      var n = $(this).attr("id").replace(/[a-z]/g, "");
      $(`#area${n}`).mouseover();
      $(`#row${n}`).addClass("in");
    });
    $(document).on("mouseout", ".legend", function (event) {
      var n = $(this).attr("id").replace(/[a-z]/g, "");
      $(`#area${n}`).mouseout();
      $(`#row${n}`).removeClass("in");
    });
    $(document).on("click", "li.legend", function (event) {
      var n = $(this).attr("id").replace(/[a-z]/g, "");
      $(`#row${n}`).find("input").first().focus();
    });

    // Area interactions
    $(document).on("mouseover", "area", function (event) {
      var n = $(this).attr("id").replace(/[a-z]/g, "");
      $(`#a${n} span`).addClass("in");
      $(`#row${n}`).addClass("in");
    });
    $(document).on("mouseout", "area", function (event) {
      var n = $(this).attr("id").replace(/[a-z]/g, "");
      $(`#a${n} span`).removeClass("in");
      $(`#row${n}`).removeClass("in");
    });

    // Table row interactions
    $(document).on("mouseover", "tr", function (event) {
      if (typeof $(this).attr("id") !== "undefined") {
        var n = $(this).attr("id").replace(/[a-z]/g, "");
        $(`#area${n}`).mouseover();
        $(`#a${n} span`).addClass("in");
      }
    });
    $(document).on("mouseout", "tr", function (event) {
      if (typeof $(this).attr("id") !== "undefined") {
        var n = $(this).attr("id").replace(/[a-z]/g, "");
        $(`#area${n}`).mouseout();
        $(`#a${n} span`).removeClass("in");
      }
    });
  },
};

// Add event handler for redraw button (add to document.ready):
$(document).on("click", ".redraw-shape", function(e) {
  const row = $(this).closest("tr");
  const rowId = row.attr("id").replace(/[a-z]/g, "");
  const rowData = table.row(row).data();
  
  // Store original area data before removal
  $("#redraw-target").data({
    "current-row": rowId,
    "original-coords": rowData.coords
  });

  // Temporarily remove the area from DOM
  $(`#area${rowId}`).remove();
  
  // Store current row ID for redraw
  $("#redraw-target").data("current-row", rowId);
  
  // Clear existing selection area
  $("#selection").hide();
  
  // Highlight the area being redrawn
  $(`#area${rowId}`).data('maphilight', {...MAPHILIGHT_CONFIG, alwaysOn: true}).trigger('alwaysOn.maphilight');
  
  // Enable drawing mode
  SelectionManager.selection = true;
  SelectionManager.redrawMode = true;
});

// Creates new row in map table and adds corresponding area and legend elements
function add_new_row(x1, y1, x2, y2) {
  if (x2 - x1 > 5 && y2 - y1 > 5) {
    x1 = parseFloat(x1.toFixed(2));
    y1 = parseFloat(y1.toFixed(2));
    x2 = parseFloat(x2.toFixed(2));
    y2 = parseFloat(y2.toFixed(2));
    var cnt = ++global_cnt;
    var coords = "" + x1 + "," + y1 + "," + x2 + "," + y2;
    var new_row = table.row
      .add({
        shape: "rect",
        coords: coords,
      })
      .draw(false);

    const displayText = formatMapItemText(cnt, {});
    $("#map").append(`<area id="area${cnt}" shape="rect" coords="${coords}"
      alt="${cnt}" title="${cnt}">`);
    $("#div_legend").append(`<li class="legend" id="a${cnt}">
      <span>${cnt}</span></li>`);
    new_row.node().id = "row" + cnt;
  }
}

// Generates HTML markup for a group table row with name and label inputs
function g_row(name, label) {
  return `<tr>
    <td><input class="form-control update" type="number"
          value="${name}" min="0" step="1"></td>
    <td><input class="form-control update" type="text"
          value="${label}"></td>
    <td><i class="fa fa-trash-alt"></i></td></tr>`;
}

// Format text for display in titles and legends, based on type and available data
function formatMapItemText(cnt, data) {
  if (!data || typeof data !== 'object') {
    return `${cnt}.`;
  }

  const { fn, sn, alt, t, href } = data;
  let txt = `${cnt}. `;

  try {
    if (!t || t === 'p') {
      if (fn || sn) {
        txt += `${(fn || '').trim()} ${(sn || '').trim()}`.trim();
        if (alt) {
          txt += ` (${alt.trim()})`;
        }
      } else if (alt) {
        txt += alt.trim();
      }
    } else if (t === 'g' || t === 'e') {
      if (href) {
        txt += alt ? `${href.trim()} (${alt.trim()})` : href.trim();
      } else if (alt) {
        txt += alt.trim();
      }
    }
    return txt;
    
  } catch (error) {
    handleError(error, "formatMapItemText");
    return `${cnt}.`;
  }
}

// Creates HTML markup for legend entries with proper person/URL formatting and links
function createLegendHTML(cnt, data) {
    if (!data) {
        return `${cnt}.`;
    }
    const { fn, sn, alt, t, href, oc } = data;
    let txt = `${cnt}. `;

    // Handle person type (default case or explicit 'p')
    if (!t || t === 'p') {
        if (fn && sn) {
            const occNum = (get(oc) && oc !== "0") ? `&oc=${encodeURIComponent(oc)}` : '';
            const linkText = fn + " " + sn;
            return `<span>${txt}<a href="%prefix;&p=${encodeURIComponent(fn)}&n=${encodeURIComponent(sn)}${occNum}">${linkText}</a>${alt ? ` (${alt})` : ''}</span>`;
        }
    }
    // Handle GeneWeb or external URL types
    else if ((t === 'g' || t === 'e') && href) {
        const baseUrl = t === 'g' ? '%prefix;' : '';
        const linkText = alt || href;
        return `<span>${txt}<a href="${baseUrl}${href}">${linkText}</a></span>`;
    }

    // Fallback for cases with only alt text
    return `<span>${txt}${alt || ''}</span>`;
}

// Updates or creates map areas and legend entries
function updateMapAndLegend(data, cnt) {
  const displayText = formatMapItemText(cnt, data);
  const group = get(data.group) !== 0 ?
    ` class="group${data.group}" data-maphilight='{"groupBy":".group${data.group}"}'` : '';

  $("#map").append(`
    <area id="area${cnt}"
          shape="rect"
          coords="${get(data.coords)}"
          alt="${displayText}"
          title="${displayText}"${group}>`
  );

  $("#div_legend").append(`
    <li class="legend" id="a${cnt}">
      ${createLegendHTML(cnt, data)}
    </li>`
  );
}

// Updates the area map titles and legend entries with proper group handling
function updateLegendLinks() {
  table.rows().every(function(rowIdx) {
    const r = this.data();
    const row = this.node();
    if (!row) {
      return;
    }

    const cnt = row.id.replace(/[a-z]/g, "");
    const group = get(r.group);
    const area = $(`#area${cnt}`);
    const legendEntry = $(`#a${cnt}`);

    if (!area.length || !legendEntry.length) {
      return;
    }

    const displayText = formatMapItemText(cnt, r);

    if (area.attr("title") !== displayText) {
      area.attr({
        "alt": displayText,
        "title": displayText
      });
    }

    if (group && group !== "0") {
      area.attr("class", `group${group}`);
      area.attr("data-maphilight", `{"groupBy":".group${group}"}`);
    }

    const newLegendHtml = createLegendHTML(cnt, r);
    if (legendEntry.html() !== newLegendHtml) {
      legendEntry.html(newLegendHtml);
    }
  });
}

// Add validation and adjustment of coordinates relative to image
function validateCoords(x1, y1, x2, y2) {
  const img = $("#image");
  const imgWidth = img.width();
  const imgHeight = img.height();
  
  // Log dimensions and coordinates for debugging
  console.log("Image dimensions:", imgWidth, imgHeight);
  console.log("Raw coordinates:", x1, y1, x2, y2);
  
  // Ensure coordinates are within image bounds
  x1 = Math.max(0, Math.min(x1, imgWidth));
  x2 = Math.max(0, Math.min(x2, imgWidth));
  y1 = Math.max(0, Math.min(y1, imgHeight));
  y2 = Math.max(0, Math.min(y2, imgHeight));
  
  // Log adjusted coordinates
  console.log("Adjusted coordinates:", x1, y1, x2, y2);
  
  return { x1, y1, x2, y2 };
}

// Function to generate correct GW syntax
function generateGwSyntax(data) {
  if (!data.fn || !data.sn) return null;

  let oc = get(data.oc);
  let oc2 = (oc != "" && oc != 0) ? "/" + oc : "";
  let txt = get(data.alt);
  return "%[%[" + data.fn + "/" + data.sn + oc2 +
         (txt ? "/" + data.fn + " " + data.sn : "") + "%]%]";
}

// Initializes main data table with configuration and event handlers
function initMainTable() {
  try {
    table = $('#map_table').DataTable({
      ajax: {
        url: "%url;&ajax=on",
        dataSrc: function(json) {
          return json.r.map || [];
        }
      },
      deferRender: true,
      rowReorder: {
        selector: 'i.drag-handle',
        update: false
      },
      columns: %[
        {
          data: null,
          orderable: false,
          defaultContent: '<i class="fa fa-grip-vertical px-1 text-grey drag-handle text-muted" title="drag’n drop"></i>'
        },
        {
         data: null,
         orderable: false,
         defaultContent: `
           <div class="d-flex sort-buttons">
             <div class="w-50 text-left">
               <button type="button" 
                       class="btn btn-sm btn-outline-secondary btn-up"
                       title="[move up/down]0">↑</button>
             </div>
             <div class="w-50 text-right">
               <button type="button"
                       class="btn btn-sm btn-outline-secondary btn-down" 
                       title="[move up/down]1">↓</button>
             </div>
           </div>`
        },
        {
          data: null,
          orderable: false,
          defaultContent: '<button type="button" class="btn btn-sm btn-outline-secondary redraw-shape" title="Redraw shape"><i class="fa fa-pen"></i></button>'
        },
        {
          data: "t",
          defaultContent: "p",
          render: function(data, type, row, meta) {
            if (type === 'display') {
              const types = {
                p: '[*person/persons]0',
                g: 'GeneWeb',
                e: 'Web'
              };
              let html = '<select class="form-control update type" row="' + meta.row + '">';
              Object.entries(types).forEach(([value, label]) => {
                const selected = (data === value || (!data && value === 'p')) ? ' selected' : '';
                html += '<option value="' + value + '"' + selected + '>' + label + '</option>';
              });
              html += '</select>';
              return html;
            }
            return data;
          }
        },
        {
          data: "fn",
          type: "string",
          defaultContent: "",
          render: function(data, type, row) {
            if (type === 'sort' || type === 'type') {
              return get(data).toLowerCase();
            }
            const disabled = (get(row.t) !== "" && row.t !== "p") ? " disabled" : "";
            return '<input class="form-control update" type="text" value="' + get(data) + '"' + disabled + '>';
          }
        },
        {
          data: "sn",
          type: "string",
          defaultContent: "",
          render: function(data, type, row) {
            if (type === 'sort' || type === 'type') {
              return get(data).toLowerCase();
            }
            const disabled = (get(row.t) !== "" && row.t !== "p") ? " disabled" : "";
            return '<input class="form-control update" type="text" value="' + get(data) + '"' + disabled + '>';
          }
        },
        {
          data: "oc",
          defaultContent: "",
          orderable: false,
          render: function(data, type, row) {
            const disabled = (get(row.t) !== "" && row.t !== "p") ? " disabled" : "";
            return '<input class="form-control update" type="number" value="' + get(data) + '" min="0" step="1"' + disabled + '>';
          }
        },
        {
          data: "group",
          type: "num",
          render: function(data, type, row) {
            if (type === "sort") {
              return parseInt(data) || 0;
              }
              return '<input class="form-control update" type="number" value="' + get(data) + '" min="0" step="1">';
          }
        },
        {
          data: "href",
          defaultContent: "",
          render: function(data, type, row) {
            const disabled = (row.t !== "e" && row.t !== "g") ? " disabled" : "";
            const placeholder = row.t === "e" ? ' placeholder="https://…"' :
                              row.t === "g" ? ' placeholder="m=…"' : "";
            return '<input class="form-control update" type="text" value="' + get(data) + '"' + placeholder + disabled + '>';
          }
        },
        {
          data: "alt",
          defaultContent: "",
          render: function(data, type, row) {
            return '<input class="form-control update" type="text" value="' + get(data) + '">';
          }
        },
        {
          data: null,
          orderable: false,
          defaultContent: '<a class="fa fa-trash-can text-danger mx-1 remove" title="[*delete]"></a>'
        },
      %],
      paging: false,
      ordering: true,
      searching: false,
      info: false,
      rowCallback: function(row, r) {
          const cnt = row.id.replace(/[a-z]/g, "");
          let txt = get(r.alt);

          if(get(r.t) == "" || r.t == "p") {
              if(get(r.fn) != "" && get(r.sn) != "") {
                  // Build Geneweb wiki syntax key
                  let oc = get(r.oc);
                  let oc2 = (oc != "" && oc != 0) ? "/" + oc : "";
                  r.gw = "%[%[" + r.fn + "/" + r.sn + oc2 + (txt ? "/" + r.fn + " " + r.sn : "") + "%]%]";
              } else {
                  delete r.gw;
              }
          } else {
              delete r.gw;
          }
          table.row(row).data(r);
        },
      initComplete: function(settings, json) {
        if (!json) {
          console.error("No JSON data received");
          return;
        }

        $("#digest").val(json.digest);
        const data = json.r;

        if (!data) {
          console.error("No data found in JSON response");
          return;
        }

        $("#fname").val(data.img).trigger('change');
        $("#page_title").val(data.title || '');
        $("#page_desc").val(data.desc || '');

        // Init map and legend from JSON
        if (Array.isArray(data.map)) {
          data.map.forEach(function(r) {
            const cnt = ++global_cnt;

            const displayText = formatMapItemText(cnt, r);
            $("#map").append(`
              <area id="area${cnt}"
                    shape="${get(r.shape)}"
                    coords="${get(r.coords)}"
                    alt="${displayText}"
                    title="${displayText}">`
            );

            $("#div_legend").append(`
              <li class="legend" id="a${cnt}">
                ${createLegendHTML(cnt, r)}
              </li>`
            );

            const row = table.row(cnt-1).node();
            if (row) {
              row.id = `row${cnt}`;
            }
          });
        }

    $("#image").on("load", function() {
      $(this).maphilight(MAPHILIGHT_CONFIG);
      console.log("Maphilight refreshed after image load");
    });
    
    // Force refresh maphilight after table initialization
    setTimeout(() => {
      $("#image").maphilight(MAPHILIGHT_CONFIG);
      console.log("Maphilight refreshed after delay");
    }, 500);

        updateLegendLinks();
        table.on('draw', updateLegendLinks);
        
      }
    });

    return table;

  } catch (error) {
    console.error("Error initializing table:", error);
    throw error;
  }
}

// Initializes group management table with data handling and events
function initGroupTable() {
  try {
    table_grp = $('#grp_table').DataTable({
      ajax: {
        url: "%url;&ajax=on",
        dataSrc: function(json) {
          return json.r.groups || [];
        }
      },
      deferRender: true,
      columns: %[
        {
          data: "name",
          type: "numeric",
          orderable: false,
          render: function(data, type, row, meta) {
            if (type === 'sort' || type === 'type') {
              return parseInt(get(data)) || 0;
            }
            // Simply display the number in a centered div
            return '<div class="text-center">' + get(data) + '</div>';
          }
        },
        {
          data: "label",
          orderable: false,
          render: function(data, type, row) {
            return '<input class="form-control update" type="text" ' +
                   'value="' + get(data) + '">';
          }
        },
        {
          data: null,
          orderable: false,
          defaultContent: '<a class="fa fa-trash-alt text-danger mx-1 remove" ' +
                          'title="[*delete]"></a>'
        }
      %],
      rowCallback: function(row, data, index) {
        const groupNum = index + 1;
        $(row).attr('id', 'g_row' + groupNum);

        // Update group labels if label exists
        const label = get(data.label);
        if (label) {
          $('#g' + groupNum).html('<span>' + groupNum + ' : ' + label + '</span>');
        }
      },
      paging: false,
      ordering: true,
      searching: false,
      info: false,
      initComplete: function(settings, json) {
        $('#grp_table thead th .dt-column-order').css('display', 'none');

        if (!json || !json.r || !json.r.groups) {
          console.warn("No groups data in JSON response");
          return;
        }

        // Initialize group legend from JSON
        json.r.groups.forEach(function(r, index) {
          const grp = ++global_grp;
          const label = get(r.label);
          const row = table_grp.row(grp-1).node();

          if (row) {
            row.id = 'g_row' + grp;
          }

          if (label) {
            $('#group_labels').append(grp + ' : ' + label + '\n');
          }
        });

        // Initial update of group labels
        GroupManager.updateGroupLabels();
      }
    });
    return table_grp;

  } catch (error) {
    console.error("Error initializing group table:", error);
    throw error;
  }
}

// Sets up button handlers for clearing image and resetting form
function setupButtonHandlers() {
  $("#clear-all").click(function () {
    $("#page_title").val("");
    $("#page_desc").val("");
    $("#fname").val("");
    $("#frame").css({ width: "auto", height: "auto" });
    $("#image").attr("src", "");
    $("#image").parent("div").css({ background: "none", height: "auto" });
    $("#selection").hide();
    $("#map").empty();
    $("#div_legend").empty();
    table.clear().draw();
    table_grp.clear().draw();
    global_cnt = 0;
  });

  $("#clear-image").click(function () {
    $("#fname").val("");
  });
}

// Handles form submission and prepares data for saving, including proper JSON formatting
function setupFormHandler() {
  $("#form").submit(function(event) {
    event.preventDefault();

    var res = {
      title: $("#page_title").val(),
      desc: $("#page_desc").val(),
      path: "doc",
      img: $("#fname").val(),
      map: table.rows().data().toArray(),
      groups: table_grp.rows().data().toArray().map((group, index) => ({
        name: index + 1,
        label: group.label
      }))
    };

    // Clean data before save
    res.map = res.map.map(item => {
      const clean = {...item};

      // Clean based on type
      if(clean.t === "p") {
        delete clean.misc;
        delete clean.href;
        if(clean.fn && clean.sn) {
          clean.gw = generateGwSyntax(clean);
        }
      } else if(clean.t === "g" || clean.t === "e") {
        delete clean.fn;
        delete clean.sn;
        delete clean.oc;
        delete clean.gw;
      }

      // Remove empty fields
      Object.keys(clean).forEach(key => {
        if(clean[key] === "" || clean[key] === undefined) {
          delete clean[key];
        }
      });

      return clean;
    });

    const title = $("#page_title").val() || "&hellip;";
    // Format JSON with proper spacing and line breaks
    const jsonString = JSON.stringify(res, null, 2)
      .replace(/\[\{/g, '[\n  {')
      .replace(/\}\]/g, '}\n]')
      .replace(/\}\,\{/g, '},\n  {');

    $("#notes").val("TITLE=" + title + "\nTYPE=gallery\n" + jsonString);
    $(this).unbind("submit").submit();
  });
}

$(document).ready(function() {
  $('body').append('<div id="redraw-target" style="display:none;"></div>');
  // Initialize core managers
  SelectionManager.init();
  RowManager.initRowMovement();
  UIManager.init();

  // Initialize Main and Group tables
  initMainTable();
  initGroupTable();

  // Initialize UI handlers
  setupButtonHandlers();
  $("#add-group-btn").on("click", GroupManager.addNewGroup);

  // Initialize form submission
  setupFormHandler();

  // Events bindings
  // Update image preview when selection changes and image map after loading
  $("#fname").on("input change", function () {
    const fname = $(this).val();

    if (fname !== "") {
      $("#image").attr("src", "%prefix;m=DOC&s=" + fname);
    }

    $("#image").on("load", function () {
      $(this).maphilight(MAPHILIGHT_CONFIG);

      const frame = $("#frame");
      frame.css({
        width: $(this).width(),
        height: $(this).height(),
      });
      frame.closest("#div_img_legend").css({
        width: $(this).width(),
      });
    });
  });

  // Handles row reordering in the data table, ensuring consistency between
  // table data, DOM elements, and visual elements (areas, legends)
  //
  // Row reorder handling required careful consideration due to DataTables returning
  // a diff array containing all cascading position changes. The solution is to only
  // process the move of the specifically dragged row (identified by edit.triggerRow)
  // and ignore intermediate shifts.
  table.on("row-reorder", function (event, diff, edit) {
    if (!diff.length) return;

    let currentData = table.rows().data().toArray();
    const draggedRowId = edit.triggerRow.node().id;

    try {
        const draggedMove = diff.find(d => d.node.id === draggedRowId);
        if (!draggedMove) return;

        const [movedItem] = currentData.splice(draggedMove.oldPosition, 1);
        currentData.splice(draggedMove.newPosition, 0, movedItem);

        table.clear();
        table.rows.add(currentData);
        table.draw(false);

        currentData.forEach((rowData, index) => {
            const rowNum = index + 1;
            const row = table.row(index).node();
            $(row).attr("id", `row${rowNum}`);

            const area = $(`#area${rowNum}`);
            if (area.length) {
                const displayText = formatMapItemText(rowNum, rowData);
                area.attr({
                    "alt": rowNum,
                    "title": rowNum
                });
            }

            const legend = $(`#a${rowNum}`);
            if (legend.length) {
                legend.attr("id", `a${rowNum}`);
            }
        });

        updateLegendLinks();

    } catch (error) {
        table.draw(false);
    }
  });

  table_grp.on("draw.dt", function () {
    table_grp.columns.adjust();
  });

  // Handle input/select updates and propagate changes to DataTables
  $(document).on("change", ".update", function() {
      let td = $(this).closest("td");
      let tr = $(this).closest("tr");
      let tableId = tr.closest("table").attr("id");
      let nextInput = null;

      // Store the next input before any table updates
      if ($(this).is(':focus')) {
          nextInput = $('input.update').eq($('input.update').index(this) + 1);
      }

      if (tableId === "grp_table") {
        let cell = table_grp.cell(td);
        cell.data($(this).val());  // Remove draw here
        GroupManager.updateGroupLabels();
      } else {
        let cell = table.cell(td);
        let rowIdx = table.row(tr).index();
        let colIdx = table.column(td).index();
        let currentData = table.row(rowIdx).data();

        if (this.nodeName === "SELECT") {
          currentData.t = $(this).val();
          if (currentData.t !== 'p') {
            currentData.fn = '';
            currentData.sn = '';
            currentData.oc = '';
            delete currentData.gw;
          }
        } else {
          let fieldName = table.column(colIdx).dataSrc();
          currentData[fieldName] = $(this).val();

          if (currentData.t === 'p' || !currentData.t) {
            if (currentData.fn && currentData.sn) {
              currentData.gw = generateGwSyntax(currentData);
            } else {
              delete currentData.gw;
            }
          }
        }

        // Update data without redrawing
        table.row(rowIdx).data(currentData);

        if (currentData.group) {
          let area = $(`#area${rowIdx + 1}`);
          area.attr('class', `group${currentData.group}`);
          area.attr('data-maphilight', `{"groupBy":".group${currentData.group}"}`);
        }

        updateLegendLinks();
      }
  });

  // Simple unified delete handler for both tables
  $(document).on("click", ".remove", function (event) {
    var tr = $(this).closest("tr");
    if (tr.closest("table").attr("id") === "grp_table") {
      table_grp.row(tr).remove().draw();
      table_grp.order(%[0, 'asc'%]).draw();
    } else {
      const n = tr.attr("id").replace(/[a-z]/g, "");
      $("#area" + n).remove();
      $("#a" + n).remove();
      table.row(tr).remove().draw();
    }
  });
});
</script>
</body>
</html>
