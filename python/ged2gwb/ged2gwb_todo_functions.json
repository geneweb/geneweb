{
  "functions": [
    {"name": "print_location", "area": "io", "desc": "Print file+line location to log", "priority": "High", "dependencies": [], "implemented": true},
    {"name": "skip_eol", "area": "lexer/io", "desc": "Skip end-of-line characters in stream", "priority": "High", "dependencies": [], "implemented": false},
    {"name": "get_to_eoln", "area": "lexer/io", "desc": "Read until end-of-line handling tabs", "priority": "High", "dependencies": ["skip_eol"], "implemented": false},
    {"name": "skip_to_eoln", "area": "lexer/io", "desc": "Skip until end-of-line", "priority": "High", "dependencies": [], "implemented": false},
    {"name": "get_ident", "area": "lexer/io", "desc": "Read identifier token (skipping spaces)", "priority": "High", "dependencies": [], "implemented": false},
    {"name": "skip_space", "area": "lexer/io", "desc": "Skip single space/tab", "priority": "High", "dependencies": [], "implemented": false},
    {"name": "line_start", "area": "lexer/io", "desc": "Ensure stream at expected line level", "priority": "High", "dependencies": [], "implemented": false},
    {"name": "get_lev", "area": "parser", "desc": "Parse a level/N-line record (recursive)", "priority": "High", "dependencies": ["parse_text","parse_address","get_lev_list"], "implemented": false},
    {"name": "parse_address", "area": "parser", "desc": "Parse address-style record (with @ids)", "priority": "High", "dependencies": ["get_ident","get_to_eoln","get_lev_list"], "implemented": false},
    {"name": "parse_text", "area": "parser", "desc": "Parse text-style record", "priority": "High", "dependencies": ["get_to_eoln","get_lev_list"], "implemented": false},
    {"name": "get_lev_list", "area": "parser", "desc": "Collect list of sub-records for a level", "priority": "High", "dependencies": ["get_lev"], "implemented": false},
    {"name": "find_lev0", "area": "io/parser", "desc": "Fast parse of level-0 header (bp,r1,r2)", "priority": "High", "dependencies": ["line_start","skip_space","get_ident","skip_to_eoln"], "implemented": true},
    {"name": "get_lev0", "area": "io/parser", "desc": "Full parse of level-0 record returning record struct", "priority": "High", "dependencies": ["line_start","skip_space","get_ident","get_to_eoln","get_lev_list","utf8_of_string"], "implemented": true},
    {"name": "open_in_bin_with_bom_check", "area": "io/charset", "desc": "Open binary file and detect UTF-8 BOM to set charset", "priority": "High", "dependencies": ["charset handling"], "implemented": true},
    {"name": "ascii_of_msdos", "area": "charset", "desc": "Map MSDOS byte values to ISO/Latin1", "priority": "High", "dependencies": [], "implemented": true},
    {"name": "ascii_of_macintosh", "area": "charset", "desc": "Map Macintosh byte values to ISO/Latin1", "priority": "High", "dependencies": [], "implemented": true},
    {"name": "utf8_of_string", "area": "charset", "desc": "Convert input string to UTF-8 according to charset", "priority": "High", "dependencies": ["ascii_of_msdos","ascii_of_macintosh","Ansel conversion"], "implemented": true},
    {"name": "preg_match", "area": "utils", "desc": "Regexp helper (used in date_of_field)", "priority": "Med", "dependencies": [], "implemented": true},
    {"name": "date_lexer (lexing_date/number/ident/text)", "area": "date_parser/lexer", "desc": "Tokenize date strings: INT/ID/TEXT/EOL etc.", "priority": "High", "dependencies": [], "implemented": false},
    {"name": "make_date_lexing", "area": "date_parser/lexer", "desc": "Create stream-based lexer from string", "priority": "High", "dependencies": ["date_lexer"], "implemented": false},
    {"name": "date grammar entries & parser", "area": "date_parser", "desc": "Grammar for date_value/date_interval/date/calendar variants (EXTEND block)", "priority": "High", "dependencies": ["date_lexer","make_date_lexing"], "implemented": false},
    {"name": "is_roman_int", "area": "date_parser/utils", "desc": "Detect Roman numeral and convert", "priority": "Med", "dependencies": ["Mutil.arabian_of_roman or port"], "implemented": false},
    {"name": "start_with_int", "area": "utils", "desc": "Test if string starts with digit", "priority": "Low", "dependencies": [], "implemented": false},
    {"name": "roman_int (grammar entry)", "area": "date_parser", "desc": "Grammar entry mapping roman numerals to ints", "priority": "Med", "dependencies": ["is_roman_int"], "implemented": false},
    {"name": "date_of_field", "area": "date_parser", "desc": "Top-level: parse a date string to internal Date or Dtext", "priority": "High", "dependencies": ["date parser/grammar","preg_match"], "implemented": true},
    {"name": "make_date", "area": "date_parser", "desc": "Create Date record from n1/n2/n3 (day/month/year with number logic)", "priority": "High", "dependencies": ["month handling","month_number_dates"], "implemented": false},
    {"name": "recover_date", "area": "date_parser", "desc": "Adjust calendars (greg/julian/french/hebrew) when recovering", "priority": "Med", "dependencies": ["Calendar conversions"], "implemented": false},
    {"name": "decode_date_interval", "area": "date_parser", "desc": "Parse intervals (BEF/AFT/BET/AND/TO/FROM)", "priority": "Med", "dependencies": ["date_of_field","date grammar"], "implemented": false},
    {"name": "strip / strip_spaces / strip_newlines", "area": "utils", "desc": "String strip helpers", "priority": "High", "dependencies": [], "implemented": true},
    {"name": "less_greater_escaped", "area": "utils/html", "desc": "Escape < and > into &lt; &gt;", "priority": "Med", "dependencies": [], "implemented": true},
    {"name": "parse_name / ident_slash", "area": "name", "desc": "Parse NAME fields with slash-separated surname", "priority": "High", "dependencies": ["strip_spaces"], "implemented": true},
    {"name": "find_field / find_all_fields / find_field_with_value", "area": "parser/utils", "desc": "Search helper for record children", "priority": "High", "dependencies": [], "implemented": true},
    {"name": "flatten_notes / extract_notes / rebuild_text / treat_notes", "area": "notes", "desc": "Collect, flatten and format NOTE and CONT/CONC chains", "priority": "High", "dependencies": ["find_field","find_all_fields","find_notes_record"], "implemented": true},
    {"name": "find_notes_record / find_sources_record", "area": "notes/io", "desc": "Retrieve referenced NOTE/SOUR by address using stored offsets", "priority": "High", "dependencies": ["get_lev0","open_in_bin_with_bom_check"], "implemented": true},
    {"name": "note / source / treat_source", "area": "notes", "desc": "Top-level accessors to note/source content for a record", "priority": "High", "dependencies": ["find_notes_record","find_sources_record","strip_spaces"], "implemented": true},
    {"name": "add_string / assume_tab", "area": "gen_arrays", "desc": "String table management, ensure capacity and return index", "priority": "High", "dependencies": [], "implemented": true},
    {"name": "per_index / fam_index / extract_addr", "area": "gen_arrays", "desc": "Map @ID labels to numeric indexes (create placeholders)", "priority": "High", "dependencies": ["assume_tab","add_string"], "implemented": true},
    {"name": "unknown_per / phony_per / unknown_fam / phony_fam", "area": "gen_arrays", "desc": "Create placeholder person/family when undefined", "priority": "High", "dependencies": ["Mutil.empty_person/family","Adef"], "implemented": true},
    {"name": "output_pindex", "area": "io", "desc": "Print GED->GW id mapping when track enabled", "priority": "Low", "dependencies": [], "implemented": false},
    {"name": "infer_death", "area": "person", "desc": "Infer death status from birth/baptism and thresholds", "priority": "Med", "dependencies": ["this_year","alive_years","dead_years"], "implemented": false},
    {"name": "name formatting helpers (particle/lookups/case)", "area": "name/utils", "desc": "particle(), string_ini_eq(), look_like_a_number(), is_a_name_char(), next_word_pos/next_sep_pos, is_a_public_name, public_name_word", "priority": "Med", "dependencies": ["particles list","Mutil.nominative","Name.title"], "implemented": false},
    {"name": "aux / capitalize_name / uppercase_name", "area": "name", "desc": "Buffer-based name capitalization logic using Name.title & Utf8.uppercase", "priority": "Med", "dependencies": ["Buff2","Name.title","Utf8.uppercase"], "implemented": false},
    {"name": "treat_indi_pevent / find_pevent_name_from_tag / treat_indi_title", "area": "events/person", "desc": "Extract person events (BIRT/DEAT/EVEN etc.) and convert to internal Epers_*", "priority": "High", "dependencies": ["find_field","find_all_fields","date_of_field","treat_source","find_event_witness"], "implemented": false},
    {"name": "find_event_witness / forward_pevent_witn / forward_witn", "area": "events/witness", "desc": "Find and register witnesses for person/family events", "priority": "High", "dependencies": ["per_index","fam_index"], "implemented": false},
    {"name": "treat_fam_fevent / find_fevent_name_from_tag", "area": "events/family", "desc": "Extract family events and convert to Efam_*", "priority": "High", "dependencies": ["find_field","find_all_fields","date_of_field","find_fevent_witness"], "implemented": false},
    {"name": "forward_godp / forward_fevent_witn", "area": "events/witness", "desc": "Register godparent and family event witnesses", "priority": "Med", "dependencies": ["per_index"], "implemented": false},
    {"name": "build_remain_tags / html_text_of_tags", "area": "notes/html", "desc": "Serialize remaining tags as HTML for insertion into notes", "priority": "Med", "dependencies": ["Buff","less_greater_escaped"], "implemented": false},
    {"name": "adoption helpers (forward_adop / adop_parent / set_adop_fam)", "area": "adoption", "desc": "Manage ADOP tags and update parent relationships", "priority": "Med", "dependencies": ["per_index"], "implemented": false},
    {"name": "add_indi", "area": "parser/indi", "desc": "Full construction of a person from INDI record (heavy)", "priority": "High", "dependencies": ["per_index","parse_name","treat_indi_pevent","treat_notes","date_of_field","add_string","find_field/find_all_fields","forward_*"], "implemented": false},
    {"name": "add_fam_norm / add_fam / set_adop_fam", "area": "parser/fam", "desc": "Construct family entries, children, marriage/divorce handling, adoption handling", "priority": "High", "dependencies": ["fam_index","per_index","treat_fam_fevent","find_all_fields","add_string"], "implemented": false},
    {"name": "treat_header2 / treat_header3 / turn_around_genealogos_bug", "area": "header", "desc": "Handle header fields: CHAR detection, default formats and header notes", "priority": "Med", "dependencies": ["find_field","find_all_fields","charset_option","Mutil.input_particles"], "implemented": false},
    {"name": "make_gen2 / make_gen3", "area": "driver", "desc": "Dispatch level-0 record processing to add_indi/add_fam/treat_header", "priority": "High", "dependencies": ["add_indi","add_fam","treat_header2/3"], "implemented": false},
    {"name": "pass1 / pass2 / pass3", "area": "pipeline", "desc": "Three passes: collect NOTE/SOUR offsets; parse INDI; parse FAM and finalize relationships", "priority": "High", "dependencies": ["open_in_bin_with_bom_check","find_lev0/get_lev0","make_gen2/make_gen3","fill_g_per"], "implemented": true},
    {"name": "fill_g_per", "area": "pipeline/utils", "desc": "Fill person.related arrays using accumulated lists", "priority": "Med", "dependencies": [], "implemented": true},
    {"name": "find_notes_record/find_sources_record", "area": "io/lookup", "desc": "Seek to stored offsets and read corresponding record", "priority": "High", "dependencies": ["get_lev0","open_in_bin_with_bom_check"], "implemented": true},
    {"name": "check_undefined", "area": "finalize", "desc": "Fill undefined placeholders (Left3) with phony objects and warn", "priority": "High", "dependencies": ["unknown_per","unknown_fam","add_string"], "implemented": true},
    {"name": "add_parents_to_isolated", "area": "finalize", "desc": "Add artificial parents to isolated persons", "priority": "Med", "dependencies": ["phony_fam","gen.g_fam scanning"], "implemented": true},
    {"name": "make_arrays", "area": "pipeline", "desc": "High-level: prepare gen, run pass1/2/3 and return internal tables", "priority": "High", "dependencies": ["pass1","pass2","pass3","open_in_bin_with_bom_check","add_string"], "implemented": true},
    {"name": "make_subarrays", "area": "finalize", "desc": "Convert tab structures into concrete arrays for Driver.make", "priority": "High", "dependencies": ["check_undefined"], "implemented": true},
    {"name": "designation", "area": "finalize/utils", "desc": "Human-readable person designation for logs", "priority": "Low", "dependencies": ["Mutil.nominative"], "implemented": false},
    {"name": "check_parents_children / check_parents_sex", "area": "finalize/validation", "desc": "Consistency checks between parents/children and sexes; apply fixes or warnings", "priority": "High", "dependencies": ["designation","Adef"], "implemented": false},
    {"name": "neg_year / neg_year_dmy / neg_year_cdate / negative_date_ancestors / negative_dates", "area": "finalize/date_fix", "desc": "Apply negative-year fixes when requested to ancestors and marriages", "priority": "Med", "dependencies": ["Date helpers"], "implemented": false},
    {"name": "finish_base", "area": "finalize", "desc": "Sort children/unions, normalize person fields, run checks and negative date pass", "priority": "High", "dependencies": ["sort_by_date","check_parents_children","check_parents_sex","negative_dates"], "implemented": true},
    {"name": "Driver.make wiring / write .gwb", "area": "output", "desc": "Create GeneWeb DB using Driver.make with arrays and particles", "priority": "High", "dependencies": ["make_subarrays","finish_base","particles loader","Geneweb.GWPARAM"], "implemented": false},
    {"name": "warning_month_number_dates / print_bad_date", "area": "date_utils/io", "desc": "Emit warnings for ambiguous numbered-month dates and bad date prints", "priority": "Low", "dependencies": ["month_number_dates"], "implemented": false},
    {"name": "CLI speclist handling (anonfun / main wiring)", "area": "cli", "desc": "Map OCaml Arg.speclist semantics to Python CLI and set global flags", "priority": "High", "dependencies": ["ged2gwb_cli parsing mapping"], "implemented": false}
  ]
}
