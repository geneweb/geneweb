[
  {
    "name": "help_display",
    "passed": false,
    "ocaml_output": [
      "Usage: ged2gwb [<ged>] [options] where options are:\n  -bd <DIR>         Specify where the \u201cbases\u201d directory with databases is installed (default if empty is \u201c.\u201d).\n  -charset          [ANSEL|ASCII|MSDOS] Force given charset decoding, overriding the possible setting in GEDCOM\n  -dates_dm         Interpret months-numbered dates as day/month/year\n  -dates_md         Interpret months-numbered dates as month/day/year\n  -ds               Set the source field for persons and families without source data\n  -efn              When creating a person, if the GEDCOM first name part holds several names, the first of this names becomes the person \"first name\" and the complete GEDCOM first name part a \"first name alias\".\n  -epn              When creating a person, if the GEDCOM first name part looks like a public name, i.e. holds either a number or a roman number, supposed to be a number of a nobility title, or one of the words: \"der\", \"den\", \"die\", \"el\", \"le\", \"la\", \"the\", supposed to be the beginning of a qualifier, then the GEDCOM first name part becomes the person \"public name\" and its first word his \"first name\".\n  -f                Remove database if already existing\n  -fne <be>         When creating a person, if the GEDCOM first name part holds a part between 'b' (any character) and 'e' (any character), it is considered to be the usual first name: e.g. -fne '\"\"' or -fne \"()\".\n  -lf               Convert first names to lowercase letters, with initials in uppercase.\n  -log <file>       Redirect log trace to this file.\n  -ls               Convert surnames to lowercase letters, with initials in uppercase. Try to keep lowercase particles.\n  -nc               No consistency check\n  -no_efn           Cancels the previous option.\n  -no_epn           Cancels the previous option.\n  -no_nd            Don't interpret a year preceded by a minus sign as a negative year\n  -no_pit           Do not consider persons having titles as public\n  -nopicture        Don't extract individual picture.\n  -o <file>         Output database (default: <input file name>.gwb, a.gwb if not available). Alphanumerics and -\n  -particles <FILE> Use the given file as list of particles\n  -reorg            Mode reorg\n  -rs_no_mention    Force relation status to NoMention (default is Married)\n  -tnd              Set negative dates when inconsistency (e.g. birth after death)\n  -trackid          Print gedcom id to gw id matches.\n  -udi x-y          Set the interval for persons whose death part is undefined: If before x years, they are considered as alive. If after y year, they are considered as death. Between x and y year, they are considered as \"don't know\". Default x is 80 Default y is 120\n  -uin              Put untreated GEDCOM tags in notes\n  -us               Convert surnames to uppercase letters.\n  -help             Display this list of options\n  --help            Display this list of options\n",
      "",
      0
    ],
    "python_output": [
      "Usage: ged2gwb [<ged>] [options] where options are:\n  -bd <DIR>         Specify where the \"bases\" directory with databases is installed (default if empty is \".\").\n  -charset          [ANSEL|ASCII|MSDOS] Force given charset decoding, overriding the possible setting in GEDCOM\n  -dates_dm         Interpret months-numbered dates as day/month/year\n  -dates_md         Interpret months-numbered dates as month/day/year\n  -ds               Set the source field for persons and families without source data\n  -efn              When creating a person, if the GEDCOM first name part holds several names, the first of this names becomes the person \"first name\" and the complete GEDCOM first name part a \"first name alias\".\n  -epn              When creating a person, if the GEDCOM first name part looks like a public name, i.e. holds either a number or a roman number, supposed to be a number of a nobility title, or one of the words: \"der\", \"den\", \"die\", \"el\", \"le\", \"la\", \"the\", supposed to be the beginning of a qualifier, then the GEDCOM first name part becomes the person \"public name\" and its first word his \"first name\".\n  -f                Remove database if already existing\n  -fne <be>         When creating a person, if the GEDCOM first name part holds a part between 'b' (any character) and 'e' (any character), it is considered to be the usual first name: e.g. -fne '\"\"' or -fne \"()\".\n  -lf               Convert first names to lowercase letters, with initials in uppercase.\n  -log <file>       Redirect log trace to this file.\n  -ls               Convert surnames to lowercase letters, with initials in uppercase. Try to keep lowercase particles.\n  -nc               No consistency check\n  -no_efn           Cancels the previous option.\n  -no_epn           Cancels the previous option.\n  -no_nd            Don't interpret a year preceded by a minus sign as a negative year\n  -no_pit           Do not consider persons having titles as public\n  -nopicture        Don't extract individual picture.\n  -o <file>         Output database (default: <input file name>.gwb, a.gwb if not available). Alphanumerics and -\n  -particles <FILE> Use the given file as list of particles\n  -reorg            Mode reorg\n  -rs_no_mention    Force relation status to NoMention (default is Married)\n  -tnd              Set negative dates when inconsistency (e.g. birth after death)\n  -trackid          Print gedcom id to gw id matches.\n  -udi x-y          Set the interval for persons whose death part is undefined: If before x years, they are considered as alive. If after y year, they are considered as death. Between x and y year, they are considered as \"don't know\". Default x is 80 Default y is 120\n  -uin              Put untreated GEDCOM tags in notes\n  -us               Convert surnames to uppercase letters.\n  -help             Display this list of options\n  --help            Display this list of options\n",
      "",
      0
    ]
  },
  {
    "name": "basic_import",
    "passed": false,
    "ocaml_output": [
      "",
      "Mode: classic, for base ./basic.gwb\n*** pass 1 (note)\n*** pass 2 (indi)\n*** pass 3 (fam)\n*** Trailer ok\n*** saving persons array\n*** saving ascends array\n*** saving unions array\n*** saving families array\n*** saving couples array\n*** saving descends array\n*** saving strings array\n*** create name index\n*** create strings of sname\n*** create strings of fname\n*** create string index\n*** create surname index\n*** create first name index\n*** ok\n",
      0
    ],
    "python_output": [
      "",
      "Mode: classic, for base ./basic.gwb\nThe database \"basic\" already exists. Use option -f to overwrite it.\n",
      2
    ]
  },
  {
    "name": "force_overwrite",
    "passed": true,
    "ocaml_output": [
      "",
      "Mode: classic, for base ./basic.gwb\n*** pass 1 (note)\n*** pass 2 (indi)\n*** pass 3 (fam)\n*** Trailer ok\n*** saving persons array\n*** saving ascends array\n*** saving unions array\n*** saving families array\n*** saving couples array\n*** saving descends array\n*** saving strings array\n*** create name index\n*** create strings of sname\n*** create strings of fname\n*** create string index\n*** create surname index\n*** create first name index\n*** ok\n",
      0
    ],
    "python_output": [
      "",
      "Mode: classic, for base ./basic.gwb\n*** pass 1 (note)\n*** pass 2 (indi)\n*** pass 3 (fam)\n*** Trailer ok\n*** saving persons array\n*** saving ascends array\n*** saving unions array\n*** saving families array\n*** saving couples array\n*** saving descends array\n*** saving strings array\n*** create name index\n*** create strings of sname\n*** create strings of fname\n*** create string index\n*** create surname index\n*** create first name index\n*** ok\n",
      0
    ]
  },
  {
    "name": "charset_ascii",
    "passed": true,
    "ocaml_output": [
      "",
      "Mode: classic, for base ./basic.gwb\nThe database \"basic\" already exists. Use option -f to overwrite it.",
      2
    ],
    "python_output": [
      "",
      "Mode: classic, for base ./basic.gwb\nThe database \"basic\" already exists. Use option -f to overwrite it.\n",
      2
    ]
  },
  {
    "name": "dates_day_month",
    "passed": false,
    "ocaml_output": [
      "Adding parents to isolated person: Test.0 DATE\nAdding parents to isolated person: Another.0 DATE\n",
      "Mode: classic, for base ./dates.gwb\n*** pass 1 (note)\n*** pass 2 (indi)\n*** pass 3 (fam)\n*** Trailer ok\n*** saving persons array\n*** saving ascends array\n*** saving unions array\n*** saving families array\n*** saving couples array\n*** saving descends array\n*** saving strings array\n*** create name index\n*** create strings of sname\n*** create strings of fname\n*** create string index\n*** create surname index\n*** create first name index\n*** ok\n",
      0
    ],
    "python_output": [
      "",
      "Mode: classic, for base ./dates.gwb\nThe database \"dates\" already exists. Use option -f to overwrite it.\n",
      2
    ]
  },
  {
    "name": "dates_month_day",
    "passed": true,
    "ocaml_output": [
      "",
      "Mode: classic, for base ./dates.gwb\nThe database \"dates\" already exists. Use option -f to overwrite it.",
      2
    ],
    "python_output": [
      "",
      "Mode: classic, for base ./dates.gwb\nThe database \"dates\" already exists. Use option -f to overwrite it.\n",
      2
    ]
  },
  {
    "name": "lowercase_firstnames",
    "passed": false,
    "ocaml_output": [
      "Adding parents to isolated person: Jean-Claude.0 VAN DAMME\nAdding parents to isolated person: Marie-Antoinette.0 DE LA FONTAINE\nAdding parents to isolated person: Pierre.0 von Habsburg\n",
      "Mode: classic, for base ./names.gwb\n*** pass 1 (note)\n*** pass 2 (indi)\n*** pass 3 (fam)\n*** Trailer ok\n*** saving persons array\n*** saving ascends array\n*** saving unions array\n*** saving families array\n*** saving couples array\n*** saving descends array\n*** saving strings array\n*** create name index\n*** create strings of sname\n*** create strings of fname\n*** create string index\n*** create surname index\n*** create first name index\n*** ok\n",
      0
    ],
    "python_output": [
      "",
      "Mode: classic, for base ./names.gwb\nThe database \"names\" already exists. Use option -f to overwrite it.\n",
      2
    ]
  },
  {
    "name": "lowercase_surnames",
    "passed": true,
    "ocaml_output": [
      "",
      "Mode: classic, for base ./names.gwb\nThe database \"names\" already exists. Use option -f to overwrite it.",
      2
    ],
    "python_output": [
      "",
      "Mode: classic, for base ./names.gwb\nThe database \"names\" already exists. Use option -f to overwrite it.\n",
      2
    ]
  },
  {
    "name": "uppercase_surnames",
    "passed": true,
    "ocaml_output": [
      "",
      "Mode: classic, for base ./names.gwb\nThe database \"names\" already exists. Use option -f to overwrite it.",
      2
    ],
    "python_output": [
      "",
      "Mode: classic, for base ./names.gwb\nThe database \"names\" already exists. Use option -f to overwrite it.\n",
      2
    ]
  },
  {
    "name": "no_consistency_check",
    "passed": true,
    "ocaml_output": [
      "",
      "Mode: classic, for base ./basic.gwb\nThe database \"basic\" already exists. Use option -f to overwrite it.",
      2
    ],
    "python_output": [
      "",
      "Mode: classic, for base ./basic.gwb\nThe database \"basic\" already exists. Use option -f to overwrite it.\n",
      2
    ]
  },
  {
    "name": "output_custom_name",
    "passed": false,
    "ocaml_output": [
      "",
      "Mode: classic, for base ./custombase.gwb\n*** pass 1 (note)\n*** pass 2 (indi)\n*** pass 3 (fam)\n*** Trailer ok\n*** saving persons array\n*** saving ascends array\n*** saving unions array\n*** saving families array\n*** saving couples array\n*** saving descends array\n*** saving strings array\n*** create name index\n*** create strings of sname\n*** create strings of fname\n*** create string index\n*** create surname index\n*** create first name index\n*** ok\n",
      0
    ],
    "python_output": [
      "",
      "Mode: classic, for base ./custombase.gwb\nThe database \"custombase\" already exists. Use option -f to overwrite it.\n",
      2
    ]
  },
  {
    "name": "track_gedcom_ids",
    "passed": true,
    "ocaml_output": [
      "",
      "Mode: classic, for base ./basic.gwb\nThe database \"basic\" already exists. Use option -f to overwrite it.",
      2
    ],
    "python_output": [
      "",
      "Mode: classic, for base ./basic.gwb\nThe database \"basic\" already exists. Use option -f to overwrite it.\n",
      2
    ]
  }
]