(* camlp4r *)
(* $Id: gwExportAscCSV.ml.ml,v 0.01 2014-04-16 10:05:38 flh Exp $ *)

open Def;
open Gwdb;


value starting_char no_num s =
  match s.[0] with
  [ 'a'..'z' | 'A'..'Z' | 'à'..'ý' | 'À'..'Ý' -> True
  | '0'..'9' -> not no_num
  | '?' -> if s = "?" then True else False
  | _ -> False ]
;

value gen_correct_string no_num no_colon no_quote s =
  (*let s = strip_spaces s in*)
  let s =
    if Mutil.utf_8_db.val (*|| raw_output.val*) then s
    else Mutil.utf_8_of_iso_8859_1 s
  in
  loop 0 0 where rec loop i len =
    if i = String.length s then Buff.get len
    else if len = 0 && not (starting_char no_num s) then
      loop i (Buff.store len '_')
    else
      match s.[i] with
      [ ' ' | '\n' | '\t' ->
          if i = String.length s - 1 then Buff.get len
          else loop (i + 1) (Buff.store len '_')
      | '_' | '\\' -> loop (i + 1) (Buff.store (Buff.store len '\\') s.[i])
      | ':' when no_colon ->
          let len = Buff.store len '\\' in
          loop (i + 1) (Buff.store (Buff.store len '\\') s.[i])
      | '"' when no_quote ->
          let len = Buff.store len '\\' in
          loop (i + 1) (Buff.store (Buff.store len '\\') s.[i])
      | c ->
          let c = if is_printable c then c else '_' in
          loop (i + 1) (Buff.store len c) ]
;

value escape_quote s = gen_correct_string False False True s;

(* TODO : tableau de mark pour les implexes. *)
value print_asc_csv base ip nb_gen =
  let () = load_ascends_array base in
  let () = load_couples_array base in
  let p = poi base ip in
  loop 0 p where rec loop i p =
    if i = nb_gen then ()
    else do {
      Printf.fprintf stdout "%s;%s\n"
        (escape_quote (sou base (get_surname p)))
        (escape_quote (sou base (get_first_name p)));
      match get_parents p with
      [ Some ifam ->
          let cpl = foi base ifam in
          do {
            loop (succ i) (poi base (get_father cpl));
            loop (succ i) (poi base (get_mother cpl));
          }
      | None -> () ];
    }
;

value ind = ref 0;
value nb_gen = ref 4;
value bname = ref "";

value speclist =
  [("-i", Arg.Int (fun i -> ind.val := i), "ip of the person (default = 0)");
   ("-n", Arg.Int (fun i -> nb_gen.val := i),
    "number of generation (default = " ^ string_of_int nb_gen.val ^ ")")]
;
value anonfun i = bname.val := i;
value usage = "Usage: " ^ Sys.argv.(0) ^ " [-i #] [-n #] base";

value main () =
  do {
    Arg.parse speclist anonfun usage;
    if bname.val = "" then do { Arg.usage speclist usage; exit 2; } else ();
    let base = Gwdb.open_base bname.val in
    let ip = Adef.iper_of_int ind.val in
    print_asc_csv base ip nb_gen.val
  }
;

main ();
