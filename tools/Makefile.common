ifeq ($(ROOT),'')
  $(error Variable ROOT must be defined in each Makefile before it is included.)
endif

$(ROOT)/tools/Makefile.config: $(ROOT)/configure
	@if [ -e "$@" ]; then \
	  echo "configure file has changed. Please rerun ./configure"; exit 1; \
	else \
	  echo "Please run ./configure first"; exit 1; \
	fi

include $(ROOT)/tools/Makefile.config

# For echo and colors.
SHELL:=/bin/bash

# Formatting and colors.
GREEN:="\\x1b[32m"
YELLOW:="\\x1b[33m"
RED:="\\x1b[31m"
MAGENTA:="\\x1b[35m"
CYAN:="\\x1b[36m"
BOLD:="\\x1b[1m"
CLEAR:="\\x1b[0m"

# A newline character to generate multiline recipes
define \n


endef

# Variables for packagers.
PREFIX=/usr
LANGDIR=$(PREFIX)/share/geneweb
MANDIR=$(PREFIX)/man/man1
DESTDIR=distribution
MANPAGES=ged2gwb.1 gwb2ged.1 gwc.1 gwc2.1 gwu.1 gwd.1 consang.1 gwsetup.1

CAMLP5_COMM=$(ROOT)/tools/camlp5_comm.sh
TEST_DIR=[ "$(abspath $<)" = "$(abspath ./$(notdir $<))" ] || { printf "$(RED)Cannot build target '$@'"; printf "Please run 'make' in directory '$(dir $<)' first$(CLEAR)"; exit 1; }
extension=$(subst .,,$(suffix $1))
EXT=$(call extension,$@)

# File extensions.
LIB_opt_EXT := .cmxa
LIB_out_EXT := .cma
OBJ_opt_EXT := .cmx
OBJ_out_EXT := .cmo

# Compiler options.
OCAMLI=$(foreach d,$(INCDIRS),-I $d)
OCAMLC=$(OCAMLC_PATH) $(OCAMLFLAGS)
OCAMLOPT=$(OCAMLOPT_PATH) $(OCAMLFLAGS)
OCAML_opt_LINK=$(OCAMLOPT) $(LINKSTATIC_opt)
OCAML_out_LINK=$(OCAMLC) $(LINKSTATIC_out)

# Common targets.

.PHONY: always
always:

.SUFFIXES:
MAKEFLAGS += --no-builtin-rules
.PHONY: all clean clean-comp clean-depend clean-exe clean-tmp depend everything everything-opt everything-out opt out

ifeq ($(NATIVE),'y')
  .DEFAULT_GOAL := opt
else
  .DEFAULT_GOAL := out
endif

DEPEND_DEPEND := $(addprefix $(ROOT)/,tools/transitive_depend.sh src/pa_lock.cmo src/pa_html.cmo src/q_codes.cmo)
DEPEND_DEPEND_NAMES := $(notdir $(DEPEND_DEPEND))

# Targets 'opt' and 'out' are defined here if not in the root Makefile.
ifneq ($(ROOT),.)

ifeq ($(ALL_OBJS)$(ALL_EXE),)
  $(error Variables ALL_OBJS and/or ALL_EXE must be defined before include)
endif

all: out
everything: all everything-out
ifeq ($(NATIVE),'y')
all: opt
everything: everything-opt
endif

everything-opt: $(EVERYTHING_OBJS:=.cmx) $(EVERYTHING_EXE:=.opt)
everything-out: $(EVERYTHING_OBJS:=.cmo) $(EVERYTHING_EXE:=.out)

opt: $(ALL_OBJS:=.cmx) $(ALL_EXE:=.opt)
out: $(ALL_OBJS:=.cmo) $(ALL_EXE:=.out)

out: STRIP := @\#

opt out:
	$(foreach EXE,$(ALL_EXE),ln -fs $(EXE).$@ $(EXE) $(\n))
	$(if $(ALL_EXE),$(STRIP) $(ALL_EXE))

%.opt:
	$(OCAML_opt_LINK) $(OCAMLI) $(LIBS:=$(LIB_opt_EXT)) $(LINKFLAGS) $^ -o $@
%.out:
	$(OCAML_out_LINK) $(OCAMLI) $(LIBS:=$(LIB_out_EXT)) $(LINKFLAGS) $^ -o $@

depend: $(DEPEND_DEPEND)
	$(ROOT)/tools/camlp5_depend.sh $(CAMLP5F) $(OCAMLI) -- $(wildcard *.ml *.mli) | sed -e 's/\/\x0D/\\/g' -e 's/\x0D//g' > .depend

.depend:
	@if [ ! -e $@ ]; then $(MAKE) -o $@ depend; fi

.objs: .depend $(INCDIRS:=/.depend)
	echo "# Generated by make" > $@
	$(ROOT)/tools/transitive_depend.sh $(OCAMLI) -filter '*.cmx' -noext -varname '%s_DEP_OBJS' $(ALL_EXE) $(EVERYTHING_EXE) >> $@
	$(foreach exe,$(ALL_EXE) $(EVERYTHING_EXE),printf "$(exe)_OBJS := \
	  $($(exe)_PREPEND_OBJS) \$$($(exe)_DEP_OBJS) $($(exe)_APPEND_OBJS) $(exe)\
	  \n$(exe).opt: \$$($(exe)_OBJS:=.cmx)\
	  \n$(exe).out: \$$($(exe)_OBJS:=.cmo)\n" >> $@$(\n))

ifneq ($(filter-out clean depend $(DEPEND_DEPEND_NAMES),$(MAKECMDGOALS)),)
  include .depend
  include .objs
endif

clean-exe:
	$(RM) *.out *.opt $(ALL_EXE) $(EVERYTHING_EXE)

clean: clean-tmp clean-comp clean-exe clean-depend

endif

clean-comp:
	$(RM) *.cm[oixa] *.cmxa *.o *.pp[oi] *.annot

clean-depend:
	$(RM) .depend .objs

clean-tmp:
	$(RM) *~ .#*

%.ppi: %.mli
	@$(TEST_DIR)
	@$(CAMLP5_COMM) $(CAMLP5F) $< -o $@

%.cmi: %.ppi
	$(OCAMLC) $(OCAMLI) -I $(CAMLP5D) -c -intf $<

%.ppo: %.ml
	@$(TEST_DIR)
	@$(CAMLP5_COMM) $(CAMLP5F) $< -o $@

%.cmo: %.ppo
	$(OCAMLC) $(OCAMLI) -I $(CAMLP5D) -c -impl $<

%.cmx: %.ppo
	$(OCAMLOPT) $(OCAMLI) -I $(CAMLP5D) -c -impl $<
