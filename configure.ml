(* ocaml ./configure.ml *)
#use "topfind"

#require "unix"

let strip = ref true
let rm = ref ""
let ext = ref ""
let os_type = ref ""
let installed pkg = 0 = Sys.command ("ocamlfind query -qo -qe " ^ pkg)
let errmsg = "usage: " ^ Sys.argv.(0) ^ " [options]"
let api = ref false
let set_api () = api := true

let speclist =
  [
    ("--gwdb-legacy", Arg.Unit ignore, " Use legacy backend");
    ("--release", Arg.Unit ignore, " Use release profile: no debug information");
    ( "--debug",
      Arg.Unit ignore,
      " Use dev profile: no optimization, debug information" );
    ("--sosa-legacy", Arg.Unit ignore, " Use legacy Sosa module implementation");
    ( "--sosa-zarith",
      Arg.Unit ignore,
      " Use Sosa module implementation based on `zarith` library" );
    ("--syslog", Arg.Unit ignore, " Log gwd errors using syslog");
  ]
  |> List.sort compare |> Arg.align

let () =
  Arg.parse speclist failwith errmsg;
  let os_type, os_d, ext, rm, strip =
    match
      let p = Unix.open_process_in "uname -s" in
      let line = input_line p in
      close_in p;
      line
    with
    | ("Linux" | "Darwin" | "FreeBSD") as os_type ->
        (os_type, " -D UNIX", "", "/bin/rm -f", "strip")
    | _ -> ("Win", " -D WINDOWS", ".exe", "rm -f", "true")
  in
  let ch = open_out "Makefile.config" in
  let writeln s = output_string ch @@ s ^ "\n" in
  let var name value = writeln @@ name ^ "=" ^ value in
  writeln @@ "# This file is generated by " ^ Sys.argv.(0) ^ ".";
  var "OS_TYPE" os_type;
  var "STRIP" strip;
  var "RM" rm;
  var "EXT" ext;
  var "OS_D" os_d;
  close_out ch
