name: Golden Master Tests

on:
  push:
    branches: [ged2gwb, main, dev]
    paths:
      - 'python/**'
      - 'test/scena/**'
      - 'test/fixtures/**'
      - '.github/workflows/golden-master-pipeline.yml'
  workflow_dispatch:

jobs:
  golden-master-tests:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            ocaml-nox \
            opam \
            build-essential \
            m4 \
            pkg-config \
            libssl-dev \
            libgmp-dev \
            zlib1g-dev \
            xdot \
            graphviz \
            perl \
            libcurl4-openssl-dev \
            libpcre3-dev

      - name: Setup OCaml and OPAM
        run: |
          opam init --disable-sandboxing --yes --auto-setup
          eval $(opam env)

          echo "=== Installing all required OCaml packages ==="
          opam install --yes --assume-depexts \
            dune \
            ocamlfind \
            camlp5 \
            cppo \
            ppx_import \
            ppx_deriving \
            pp_loc \
            fmt \
            markup \
            calendars \
            zarith \
            unidecode \
            ocurl \
            yojson \
            lwt \
            lwt_ssl \
            digestif \
            pcre

      - name: Configure GeneWeb
        run: |
          eval $(opam env)

          echo "=== OCaml environment ==="
          ocaml -version
          opam list --installed

          echo "=== Running configure ==="
          ocaml ./configure.ml

      - name: Build GeneWeb with make clean distrib
        run: |
          eval $(opam env)

          echo "=== Building GeneWeb ==="
          make clean
          make distrib

          echo "=== Verifying build results ==="
          ls -la distribution/gw/

          echo "=== Testing built binaries ==="
          for binary in distribution/gw/*; do
            if [ -x "$binary" ]; then
              echo "Testing $(basename $binary):"
              "$binary" -help 2>&1 | head -3 || echo "Binary test completed"
            fi
          done

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f python/requirements.txt ]; then
            pip install -r python/requirements.txt
          fi

      - name: Create test fixtures
        run: |
          mkdir -p test/fixtures

          if [ ! -f "test/fixtures/basic.ged" ]; then
            cat > test/fixtures/basic.ged << 'EOF'
          0 HEAD
          1 SOUR ged2gwb-test
          1 GEDC
          2 VERS 5.5.1
          2 FORM LINEAGE-LINKED
          1 CHAR UTF-8
          0 @I1@ INDI
          1 NAME John /DOE/
          1 SEX M
          1 BIRT
          2 DATE 1 JAN 1950
          2 PLAC New York, USA
          0 TRLR
          EOF
          fi

          # Create additional test files
          for file in dates.ged names.ged; do
            if [ ! -f "test/fixtures/$file" ]; then
              cp test/fixtures/basic.ged test/fixtures/$file
            fi
          done

          echo "Test fixtures created:"
          ls -la test/fixtures/

      - name: Verify environment before tests
        run: |
          echo "=== Final environment check ==="

          echo "OCaml binaries:"
          for binary in ged2gwb gwd gwc; do
            if [ -f "distribution/gw/$binary" ] && [ -x "distribution/gw/$binary" ]; then
              echo "✅ distribution/gw/$binary"
              file "distribution/gw/$binary"
            else
              echo "❌ Missing: distribution/gw/$binary"
              exit 1
            fi
          done

          echo "Python implementations:"
          if [ -f "python/ged2gwb/ged2gwb.py" ]; then
            echo "✅ python/ged2gwb/ged2gwb.py"
            python3 python/ged2gwb/ged2gwb.py -help | head -2 || echo "Python test completed"
          else
            echo "❌ Missing: python/ged2gwb/ged2gwb.py"
            exit 1
          fi

          echo "Test files:"
          if ls test/scena/*.json >/dev/null 2>&1; then
            echo "✅ Test JSON files found"
            ls -la test/scena/*.json
          else
            echo "❌ No test JSON files found"
            exit 1
          fi

      - name: Run Golden Master Tests
        run: |
          echo "🧪 Starting Golden Master Tests..."

          # Run tests for each binary
          success_count=0
          total_count=0

          for test_file in test/scena/*.json; do
            if [ -f "$test_file" ]; then
              binary_name=$(basename "$test_file" .json)
              total_count=$((total_count + 1))

              echo ""
              echo "🧪 Testing binary: $binary_name"
              echo "================================"

              # Verify both versions exist
              if [ ! -f "distribution/gw/$binary_name" ]; then
                echo "❌ OCaml binary missing: distribution/gw/$binary_name"
                continue
              fi

              if [ ! -d "python/$binary_name" ]; then
                echo "❌ Python implementation missing: python/$binary_name"
                continue
              fi

              # Run the Golden Master test
              if python3 test/run_golden_tests.py "$binary_name"; then
                echo "✅ $binary_name tests PASSED"
                success_count=$((success_count + 1))
              else
                echo "❌ $binary_name tests FAILED"

                # Show test results for debugging
                if [ -f "test/results/$binary_name/results.json" ]; then
                  echo "Test results:"
                  cat "test/results/$binary_name/results.json" | jq '.[] | {name: .name, passed: .passed}' || cat "test/results/$binary_name/results.json"
                fi
              fi
            fi
          done

          echo ""
          echo "🏁 FINAL RESULTS"
          echo "================"
          echo "Total binaries tested: $total_count"
          echo "Successful: $success_count"
          echo "Failed: $((total_count - success_count))"

          if [ $success_count -eq $total_count ] && [ $total_count -gt 0 ]; then
            echo "🎉 ALL TESTS PASSED!"
            exit 0
          else
            echo "⚠️ Some tests failed"
            exit 1
          fi

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: golden-master-test-results
          path: |
            test/results/
            test/scena/
            distribution/gw/
          retention-days: 30
