name: Test Pipeline Geneweb Python

on:
  push:
    branches: [master, dev]
    paths:
      - 'src/python/**'
      - 'src/python/tests/**'
      - 'src/Makefile'
      - 'src/python/Makefile'
      - '.github/workflows/geneweb-python.yml'
  workflow_dispatch:

jobs:
  test-geneweb-python:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            ocaml-nox \
            opam \
            build-essential \
            m4 \
            pkg-config \
            libssl-dev \
            libgmp-dev \
            zlib1g-dev \
            xdot \
            graphviz \
            perl \
            libcurl4-openssl-dev \
            libpcre3-dev

      - name: Setup OCaml and OPAM
        run: |
          opam init --disable-sandboxing --yes --auto-setup
          eval $(opam env)
          echo "=== Installing base OCaml tools ==="
          opam install --yes --assume-depexts dune

      - name: Install GeneWeb dependencies
        run: |
          eval $(opam env)
          echo "=== Installing exact GeneWeb dependencies ==="
          opam install --yes --assume-depexts \
            uri \
            camlzip \
            camlp5 \
            digestif \
            camlp-streams \
            jingoo \
            ocamlfind \
            ppx_import \
            ppx_deriving \
            re \
            fmt \
            pp_loc \
            uunf \
            markup \
            yojson \
            unidecode \
            calendars

      - name: Configure and Build GeneWeb
        run: |
          eval $(opam env)
          echo "=== OCaml environment ==="
          ocaml -version
          echo "=== Running configure ==="
          ocaml ./configure.ml
          echo "=== Building GeneWeb ==="
          make clean
          make distrib

      - name: Install Python dependencies
        run: |
          cd python
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          pip install -e .

      - name: Setup Python development environment
        run: |
          cd python
          echo "Setting up development environment..."
          make dev-setup

      - name: Code Quality Checks
        run: |
          cd python
          echo "=== Running Code Quality Checks ==="

          # Format code with ruff
          echo "Formatting code..."
          make format

          # Auto-fix linting issues
          echo "Auto-fixing linting issues..."
          make fix

          # Run linting checks
          echo "Running linting checks..."
          make lint

      - name: Run All Tests
        run: |
          cd python
          echo "=== Running All Tests ==="

          # Run all tests (unit + integration + concrete)
          make test

          # Generate coverage report
          make test-coverage

      - name: Run Specific Test Categories
        run: |
          cd python
          echo "=== Running Specific Test Categories ==="

          # Run unit tests
          echo "Running unit tests..."
          make test-unit

          # Run integration tests
          echo "Running integration tests..."
          make test-integration

          # Run concrete tests with real files
          echo "Running concrete tests..."
          make test-concrete

      - name: Complete Code Verification
        run: |
          cd python
          echo "=== Complete Code Verification ==="

          # Run all checks (format + lint + test)
          make check

      - name: Check Code Quality Status
        run: |
          cd python
          echo "=== Code Quality Status ==="

          # Show linting status
          make status

          # Show remaining issues
          make issues

      - name: Run Demonstrations
        run: |
          cd python
          echo "=== Running Demonstrations ==="

          # Demo with sample.ged
          echo "Running demo with sample.ged..."
          make demo

          # Demo with uk.ged
          echo "Running demo with uk.ged..."
          make demo-uk

      - name: Advanced Code Cleanup
        run: |
          cd python
          echo "=== Advanced Code Cleanup ==="

          # Complete code cleanup
          make clean-code

          # Check if any issues remain
          make check-ruff

      - name: Final Verification
        run: |
          cd python
          echo "=== Final Verification ==="

          # Run final check without mypy (faster)
          make check-ruff

          # Verify package installation
          echo "Verifying package installation..."
          python -c "import ged2gwb; print('✓ ged2gwb imported successfully')"
          python -c "import gedcom; print('✓ gedcom imported successfully')"
          python -c "import lib.db_pickle; print('✓ db_pickle imported successfully')"

          # Test CLI functionality
          echo "Testing CLI functionality..."
          python -m ged2gwb --help > /dev/null && echo "✓ CLI help works"

      - name: Generate comprehensive test report
        if: always()
        run: |
          echo "=== Comprehensive Test Summary ==="
          cd python

          # Final status check
          echo "=== Final Code Quality Status ==="
          make status

          # Show any remaining issues
          echo "=== Remaining Issues ==="
          make issues

          # Show test results summary
          echo "=== Test Results Summary ==="
          echo "Unit tests: $(make test-unit 2>&1 | grep -c 'PASS\|FAIL' || echo '0')"
          echo "Integration tests: $(make test-integration 2>&1 | grep -c 'PASS\|FAIL' || echo '0')"
          echo "Concrete tests: $(make test-concrete 2>&1 | grep -c 'PASS\|FAIL' || echo '0')"

          # Show project statistics
          echo "=== Project Statistics ==="
          echo "OCaml binaries: $(ls ../distribution/gw/ 2>/dev/null | wc -l) found"
          echo "Fixture files: $(find ../tests/ tests/ -name '*.ged' 2>/dev/null | wc -l) GED files"
          echo "Python modules: $(find . -name '*.py' | wc -l) Python files"
          echo "Test files: $(find . -name 'test_*.py' | wc -l) test files"

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: comprehensive-test-results
          path: |
            python/tests/reports/
            python/tests/
            tests/
            distribution/gw/
          retention-days: 30
