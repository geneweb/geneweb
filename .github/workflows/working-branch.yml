name: Working Branch Checks

on:
  workflow_call:
    outputs:
      python-tests-passed:
        description: "Whether Python tests passed"
        value: ${{ jobs.task-branch-check.outputs.python-tests-passed }}
      use-python-binaries:
        description: "Whether to use Python binaries"
        value: ${{ jobs.task-branch-check.outputs.use-python-binaries }}
  workflow_dispatch:

jobs:
  task-branch-check:
    runs-on: ubuntu-22.04
    outputs:
      python-tests-passed: ${{ steps.test-results.outputs.python-tests-passed }}
      use-python-binaries: ${{ steps.test-results.outputs.use-python-binaries }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: |
          cd src/python
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .

      - name: Setup Python development environment
        run: |
          cd src/python
          echo "Setting up development environment..."
          make setup

      - name: Code Quality Checks
        run: |
          cd src/python
          echo "=== Running Code Quality Checks ==="

          # Format code with ruff
          echo "Formatting code..."
          make format

          # Auto-fix linting issues
          echo "Auto-fixing linting issues..."
          make fix

          # Run linting checks
          echo "Running linting checks..."
          make lint

      - name: Run All Tests
        run: |
          cd src/python
          echo "=== Running All Tests ==="

          # Run all tests
          make test

          # Generate coverage report
          make test-coverage

      - name: Final Verification
        run: |
          cd src/python
          echo "=== Final Verification ==="

          # Run final check
          make check

          # Verify package installation
          echo "Verifying package installation..."
          python -c "import ged2gwb; print('‚úì ged2gwb imported successfully')"
          python -c "import gedcom; print('‚úì gedcom imported successfully')"
          python -c "import lib.db; print('‚úì db imported successfully')"

          # Test CLI functionality
          echo "Testing CLI functionality..."
          python -m ged2gwb --help > /dev/null && echo "‚úì CLI help works"

      - name: Generate Report
        if: always()
        run: |
          echo "=== Task Branch Report ==="
          cd src/python

          # Show test results
          echo "=== Test Results ==="
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Author: ${{ github.actor }}"
          echo "Python modules: $(find . -name '*.py' | wc -l) Python files"
          echo "Test files: $(find . -name 'test_*.py' | wc -l) test files"

      - name: Clean branch name
        id: clean-branch
        run: |
          # Clean branch name for artifact naming
          CLEAN_BRANCH=$(echo "${{ github.ref_name }}" | sed 's/[\/\\:*?"<>|]/_/g')
          echo "clean-branch-name=$CLEAN_BRANCH" >> $GITHUB_OUTPUT
          echo "Original branch: ${{ github.ref_name }}"
          echo "Clean branch: $CLEAN_BRANCH"

      - name: Upload results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: task-branch-results-${{ steps.clean-branch.outputs.clean-branch-name }}
          path: |
            src/python/tests/reports/
            src/python/tests/
          retention-days: 7

      - name: Capture Test Results
        id: test-results
        if: always()
        run: |
          # Check if all previous steps succeeded
          if [[ "${{ job.status }}" == "success" ]]; then
            echo "python-tests-passed=true" >> $GITHUB_OUTPUT
            echo "use-python-binaries=true" >> $GITHUB_OUTPUT
            echo "‚úÖ All Python tests passed - Python binaries can be used"
          else
            echo "python-tests-passed=false" >> $GITHUB_OUTPUT
            echo "use-python-binaries=false" >> $GITHUB_OUTPUT
            echo "‚ùå Python tests failed - OCaml binaries will be used as fallback"
          fi
  # Build Docker image based on test results (only on master)
  docker-build:
    needs: [task-branch-check]
    if: always() && github.ref == 'refs/heads/master'
    uses: ./.github/workflows/docker.yml
    with:
      use_python_binaries: ${{ needs.task-branch-check.outputs.use-python-binaries == 'true' }}
    secrets: inherit

  # Deploy notification (only on master)
  deploy-status:
    needs: [task-branch-check, docker-build]
    runs-on: ubuntu-latest
    environment: production
    if: always() && github.ref == 'refs/heads/master'
    steps:
      - name: Deployment Status
        run: |
          echo "=== Deployment Summary ==="
          echo "Python Tests Result: ${{ needs.task-branch-check.result }}"
          echo "Use Python Binaries: ${{ needs.task-branch-check.outputs.use-python-binaries }}"
          echo "Docker Build Result: ${{ needs.docker-build.result }}"
          
          if [[ "${{ needs.task-branch-check.outputs.use-python-binaries }}" == "true" ]]; then
            echo "‚úÖ Docker image built with Python binaries (all tests passed)"
          else
            echo "üîÑ Docker image built with OCaml binaries (fallback)"
            echo "   ‚Üí Python tests failed"
          fi
          
          if [[ "${{ needs.docker-build.result }}" == "success" ]]; then
            echo "üöÄ Docker image successfully pushed to registry"
          else
            echo "‚ùå Docker build failed"
          fi

