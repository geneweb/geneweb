module type S = sig
  type char_
  (** Type of character *)

  val compare_char : char_ -> char_ -> int
  (** [compare_char c1 c2] compares the characters [c1] and [c2]. *)

  type t
  (** Type of word *)

  val empty : t
  (** The empty word. *)

  val of_rev_list : char_ list -> t
  (** [of_rev_list l] produces the word whose the characters are given by the
      reversed list of [l]. *)

  val length : t -> int
  (** [length w] returns the number of characters in [w]. *)

  val compare : t -> t -> int
  (** [compare w1 w2] compares the words [w1] and [w2] using the lexicographic
      order generated by [compare_char]. *)

  val hash : t -> int
  (** [hash w] computes a hash of the word [w]. *)

  val get : t -> int -> char_
  (** [get w i] returns the ith character of [w]. *)

  val cat : t -> t -> t
  (** [cat w1 w2] concatenates [w1] and [w2]. *)

  val pp : t Fmt.t
  (** [pp ppf w] prints the word [w] on the formatter [ppf]. *)
end

module Default : S with type char_ = char and type t = string
